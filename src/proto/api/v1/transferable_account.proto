syntax = "proto3";

package api.v1;

import "google/api/annotations.proto";

option go_package = "../../../go/pb";

// Structs
message Account {
    string account_id = 1;
    string owner = 2;
    string public_key_x = 3;
    string public_key_y = 4;
    Curve curve = 5;
    bool is_locked = 6;
}

enum Curve {
  CURVE_UNSPECIFIED = 0;
  CURVE_ECDSA = 1;
  CURVE_EDDSA = 2;
}

message TimeLock {
    uint64 lock_until = 1;
    string locked_by = 2;
}

// Requests
message TimedSignature {
    uint64 valid_for = 1; // unix timestamp
    string message_hash = 2; // hex encoded
    string signature = 3; // hex encoded
    string signer = 4; // address
}

message AccountOperationRequest {
    string account_id = 1;
    TimedSignature proof = 2;
}

message CreateAccountRequest {
    TimedSignature proof = 1;
}

message TransferAccountRequest {
    AccountOperationRequest base = 1;
    string to = 2;
}

message DeleteAccountRequest {
    AccountOperationRequest base = 1;
}

message LockAccountRequest {
    AccountOperationRequest base = 1;
}

message UnlockAccountRequest {
    AccountOperationRequest base = 1;
}

message ApproveAddressRequest {
    AccountOperationRequest base = 1;
    string address = 2;
}

message RevokeApprovalRequest {
    AccountOperationRequest base = 1;
    string address = 2;
}

message SignRequest {
    AccountOperationRequest base = 1;
    string data = 2; // hex encoded
}

message GetAccountRequest {
    string account_id = 1;
}

message IsApprovedRequest {
    string account_id = 1;
    string address = 2;
}

message IsOwnerRequest {
    string account_id = 1;
    string address = 2;
}

message IsAccountLockedRequest {
    string account_id = 1;
}

// Responses
message CreateAccountResponse {
    string tx_hash = 1;
    string account_id = 2;
}

message TransferAccountResponse {
    string tx_hash = 1;
}

message DeleteAccountResponse {
    string tx_hash = 1;
}

message UnlockAccountResponse {
    string tx_hash = 1;
}

message ApproveAddressResponse {
    string tx_hash = 1;
}

message RevokeApprovalResponse {
    string tx_hash = 1;
}

message SignResponse {
    string tx_hash = 1;
    string signature = 2; // hex encoded
}

message GetAccountResponse {
    Account account = 1;
}

message IsApprovedResponse {
    bool result = 1;
}

message IsOwnerResponse {
    bool result = 1;
}

message IsAccountLockedResponse {
    bool result = 1;
}

message TimeLockResponse {
    TimeLock time_lock = 1;
}

// Service
service AccountService {
    rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse) {
        option (google.api.http) = {
            post: "/v1/accounts"
            body: "*"
        };
    }
    rpc TransferAccount(TransferAccountRequest) returns (TransferAccountResponse) {
        option (google.api.http) = {
            post: "/v1/accounts/{base.account_id}/transfer"
            body: "*"
        };
    }
    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse) {
        option (google.api.http) = {
            delete: "/v1/accounts/{base.account_id}"
        };
    }
    rpc UnlockAccount(UnlockAccountRequest) returns (UnlockAccountResponse) {
        option (google.api.http) = {
            post: "/v1/accounts/{base.account_id}/unlock"
            body: "*"
        };
    }
    rpc ApproveAddress(ApproveAddressRequest) returns (ApproveAddressResponse) {
        option (google.api.http) = {
            post: "/v1/accounts/{base.account_id}/approve"
            body: "*"
        };
    }
    rpc RevokeApproval(RevokeApprovalRequest) returns (RevokeApprovalResponse) {
        option (google.api.http) = {
            post: "/v1/accounts/{base.account_id}/revoke"
            body: "*"
        };
    }
    rpc Sign(SignRequest) returns (SignResponse) {
        option (google.api.http) = {
            post: "/v1/accounts/{base.account_id}/sign"
            body: "*"
        };
    }
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
        option (google.api.http) = {
            get: "/v1/accounts/{account_id}"
        };
    }
    rpc IsApproved(IsApprovedRequest) returns (IsApprovedResponse) {
        option (google.api.http) = {
            get: "/v1/accounts/{account_id}/approved/{address}"
        };
    }
    rpc IsOwner(IsOwnerRequest) returns (IsOwnerResponse) {
        option (google.api.http) = {
            get: "/v1/accounts/{account_id}/owner/{address}"
        };
    }
    rpc IsAccountLocked(IsAccountLockedRequest) returns (IsAccountLockedResponse) {
        option (google.api.http) = {
            get: "/v1/accounts/{account_id}/locked"
        };
    }
}
