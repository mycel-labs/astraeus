syntax = "proto3";

package account;

// Structs
message Account {
    string account_id = 1;
    string owner = 2;
    uint64 public_key_x = 3;
    uint64 public_key_y = 4;
    string key = 5;
}

message TimeLock {
    uint64 lock_until = 1;
    string locked_by = 2;
}

// Requests
message TimedSignature {
    uint64 valid_for = 1;
    bytes message_hash = 2;
    bytes signature = 3;
    string signer = 4;
}

message AccountOperationRequest {
    string account_id = 1;
    TimedSignature proof = 2;
}

message CreateAccountRequest {}

message TransferAccountRequest {
    AccountOperationRequest base = 1;
    string to = 2;
}

message DeleteAccountRequest {
    AccountOperationRequest base = 1;
}

message LockAccountRequest {
    AccountOperationRequest base = 1;
}

message UnlockAccountRequest {
    AccountOperationRequest base = 1;
}

message ApproveAddressRequest {
    AccountOperationRequest base = 1;
    string address = 2;
}

message RevokeApprovalRequest {
    AccountOperationRequest base = 1;
    string address = 2;
}

message SignRequest {
    AccountOperationRequest base = 1;
    bytes data = 2;
}

// Responses
message AccountResponse {
    Account account = 1;
}

message BoolResponse {
    bool result = 1;
}

message BytesResponse {
    bytes data = 1;
}

message TimeLockResponse {
    TimeLock time_lock = 1;
}

// Service
service AccountService {
    rpc CreateAccount(CreateAccountRequest) returns (BytesResponse);
    rpc TransferAccount(TransferAccountRequest) returns (BytesResponse);
    rpc DeleteAccount(DeleteAccountRequest) returns (BytesResponse);
    rpc LockAccount(LockAccountRequest) returns (BytesResponse);
    rpc UnlockAccount(UnlockAccountRequest) returns (BytesResponse);
    rpc ApproveAddress(ApproveAddressRequest) returns (BytesResponse);
    rpc RevokeApproval(RevokeApprovalRequest) returns (BoolResponse);
    rpc Sign(SignRequest) returns (BytesResponse);
    rpc GetAccount(string) returns (AccountResponse);
    rpc IsApproved(ApproveAddressRequest) returns (BoolResponse);
    rpc IsOwner(ApproveAddressRequest) returns (BoolResponse);
    rpc IsLocked(string) returns (BoolResponse);
    rpc GetLock(string) returns (TimeLockResponse);
}
