// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package transferableaccountstore

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ITransferableAccountStoreAccount is an auto generated low-level Go binding around an user-defined struct.
type ITransferableAccountStoreAccount struct {
	AccountId          [16]byte
	Owner              common.Address
	PublicKeyX         *big.Int
	PublicKeyY         *big.Int
	SignatureAlgorithm uint8
	IsLocked           bool
}

// SignatureVerifierTimedSignature is an auto generated low-level Go binding around an user-defined struct.
type SignatureVerifierTimedSignature struct {
	ValidFor    uint64
	MessageHash [32]byte
	Signature   []byte
	Signer      common.Address
}

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"AA\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BB\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"GX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"GY\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"KEY_FA\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PP\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"accountApprovals\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"accountsStore\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approveAddress\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_address\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createAccount\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createAccountCallback\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"account\",\"type\":\"tuple\",\"internalType\":\"structITransferableAccountStore.Account\",\"components\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deleteAccount\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getAccount\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structITransferableAccountStore.Account\",\"components\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isAccountLocked\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isApproved\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_address\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isOwner\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_address\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"revokeApproval\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_address\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"sign\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"signCallback\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferAccount\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unlockAccount\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifyTimedSignature\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AccountCreated\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"account\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structITransferableAccountStore.Account\",\"components\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AccountDeleted\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AccountLocked\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AccountTransferred\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"account\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structITransferableAccountStore.Account\",\"components\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AccountUnlocked\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AddressApproved\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"approvedAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ApprovalRevoked\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"revokedAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Signature\",\"inputs\":[{\"name\":\"signature\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"InvalidTimedSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyApprovedAccount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyOwnerCanApproveAddresses\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyOwnerCanDeleteAccount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyOwnerCanRevokeApproval\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyOwnerCanUnlockAccount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyUnlockAccount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"PeekerReverted\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}]",
	Bin: "0x608080604052346200009a57600080546001908181811c911680156200008f575b60208210146200007b57601f81116200004f575b50506006624b455960e81b019055612b469081620000a08239f35b828052601f60208420910160051c8101905b81811062000070575062000034565b838155820162000061565b634e487b7160e01b83526022600452602483fd5b90607f169062000020565b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806303a507be146101775780630b70e71b146101725780633c1884e91461016d5780634374cbbf146101685780634518f6b3146101635780635727dc5c1461015e57806358ee5f38146101595780636243c38214610154578063690937891461014f578063761ca1541461014a5780637a308a4c146101455780637e89e7af14610140578063826b94691461013b5780638e62ab0214610136578063997da8d414610131578063a69deb2e1461012c578063ba545e8514610127578063bde1eee714610122578063da23f4e31461011d578063e49520f714610118578063e62806a7146101135763eeeac01e1461010e57600080fd5b611005565b610f62565b610ede565b610d10565b610cf7565b610cde565b610c7b565b610c5f565b610bbc565b610b97565b610b16565b610adb565b610aab565b61091c565b6108e8565b6107d8565b6107bc565b6106fc565b61056c565b6104c6565b610391565b346101b25760003660031901126101b25760206040517f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817988152f35b600080fd5b908160809103126101b25790565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b038211176101f657604052565b6101c5565b606081019081106001600160401b038211176101f657604052565b604081019081106001600160401b038211176101f657604052565b90601f801991011681019081106001600160401b038211176101f657604052565b6040519061025f826101db565b565b60405190608082018281106001600160401b038211176101f657604052565b6001600160401b0381116101f657601f01601f191660200190565b9190916102a781610280565b6102b46040519182610231565b809382825282116101b257818160009384602080950137010152565b9291926102dc82610280565b916102ea6040519384610231565b8294818452818301116101b2578281602093846000960137010152565b9080601f830112156101b257816020610322933591016102d0565b90565b6001600160a01b038116036101b257565b359061025f82610325565b9060606003198301126101b2576001600160401b036004358181116101b2578361036d916004016101b7565b926024359182116101b25761038491600401610307565b9060443561032281610325565b346101b25761039f36610341565b90916103bc60ff60046103b186610eb8565b015460081c166110ab565b6103c5816121ad565b156104715760606103e19101356103db81610325565b83611074565b1561045f578161044b61043b61042161041a7fa3c463e01b2fce913c2e9ef8f9a10531b2e5447cc4e77d42b31c832376b6431f96610eb8565b5460801b90565b6001600160801b0319166000526002602052604060002090565b80546001600160a01b0319169055565b61045a60405192839283611117565b0390a1005b60405163580522df60e11b8152600490fd5b604051637239f2bf60e11b8152600490fd5b9060406003198301126101b2576001600160401b036004358181116101b257836104af916004016101b7565b926024359182116101b25761032291600401610307565b346101b2576104d436610483565b906104e560ff60046103b185610eb8565b6104ee816121ad565b1561047157606061050a91013561050481610325565b82611074565b1561055a5761045a8161054e60046105427f7f6f9b5b10671e68dda65ac00050fba4d555889d122fcbbbb2d4739ea25a017995610eb8565b01805461ff0019169055565b60405191829182610a9a565b604051632825572b60e21b8152600490fd5b346101b25761057a36610341565b909161058c60ff60046103b186610eb8565b610595816121ad565b15610471576105b26105ac60606105b6930161110d565b84611026565b1590565b61062c578161060c6105e87f72b22feb9960f9be8120ca344ab76eda8b88fec09813b9dc25b8f079e3c4643794610eb8565b6001810180546001600160a01b0319166001600160a01b0390951694909417909355565b61061d61043b610421845460801b90565b61045a60405192839283611eb2565b60405163285b8d9760e21b8152600490fd5b60206003198201126101b257600435906001600160401b0382116101b25761032291600401610307565b634e487b7160e01b600052602160045260246000fd5b6003111561068857565b610668565b9060038210156106885752565b60a080916001600160801b03198151168452600180831b03602082015116602085015260408101516040850152606081015160608501526106e36080820151608086019061068d565b01511515910152565b60c08101929161025f919061069a565b346101b2576107b86107436107103661063e565b60405161071c816101db565b60a06000918281528260208201528260408201528260608201528260808201520152610eb8565b6107ac60ff600460405193610757856101db565b6001600160801b0319815460801b16855260018060a01b0360018201541660208601526002810154604086015260038101546060860152015461079f8282166080860161109f565b60081c16151560a0830152565b604051918291826106ec565b0390f35b346101b25760003660031901126101b257602060405160078152f35b346101b2576107e636610341565b90916107f860ff60046103b186610eb8565b6108046105b2826121ad565b610471576108296105b2610823606061081c87610eb8565b940161110d565b85611074565b6108ac576108996108a77fa54ea849c371a19826f087877d0e3fc76eed14d221cfad8573798e692990e28a946108898561086a61042161044b975460801b90565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040519283916020830190610ea1565b03601f198101835282610231565b612a34565b60405163714547f360e01b8152600490fd5b60206003198201126101b257600435906001600160401b0382116101b257610322916004016101b7565b346101b25760206109006108fb366108be565b6121ad565b6040519015158152f35b6001600160801b03198116036101b257565b346101b25760203660031901126101b2576004356109398161090a565b6001600160801b0319166000526002602052602060018060a01b0360406000205416604051908152f35b604051906000805490600182811c92818116918215610a48575b6020918286108414610a3457858852879493602086019392918115610a1557506001146109b4575b50505061025f92500383610231565b9250936109e2600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390565b946000935b8285106109ff5750505061025f9350013880806109a5565b86548585015295860195889550938101936109e7565b9250505061025f9491925060ff19168252151560051b013880806109a5565b634e487b7160e01b85526022600452602485fd5b93607f169361097d565b60005b838110610a655750506000910152565b8181015183820152602001610a55565b90602091610a8e81518092818552858086019101610a52565b601f01601f1916010190565b906020610322928181520190610a75565b346101b25760003660031901126101b2576107b8610ac7610963565b604051918291602083526020830190610a75565b346101b25760003660031901126101b25760206040517f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b88152f35b346101b25760603660031901126101b2576001600160401b036004358181116101b257610b479036906004016101b7565b906024358181116101b257610b60903690600401610307565b916044359182116101b257366023830112156101b2576107b892610b9161054e9336906024816004013591016102d0565b91611f27565b346101b25760003660031901126101b257610bba610bb5363661029b565b611537565b005b346101b257610bca36610483565b90610bd4816121ad565b15610471576060610bea91013561050481610325565b15610c4d577f68621f32198be2aabd285ff157a36182342ebc518a0e054c08a1461ae0d86431610c4782610c1f600494610eb8565b6000948186809355826001820155826002820155826003820155015560405191829182610a9a565b0390a180f35b604051639ff2588560e01b8152600490fd5b346101b25760003660031901126101b257602060405160008152f35b346101b257602060ff6004610c97610c923661063e565b610eb8565b015460081c166040519015158152f35b60406003198201126101b257600435906001600160401b0382116101b257610cd191600401610307565b9060243561032281610325565b346101b2576020610900610cf136610ca7565b90611026565b346101b2576020610900610d0a36610ca7565b90611074565b346101b257610d1e366108be565b610d2e610d29611b1d565b61193c565b610d3a6105b2826121ad565b61047157610e9561054e6107b892610d50611e1a565b90610e86610d8a610d5f611988565b610d7b30610d6c83611331565b6001600160a01b039091169052565b610d836119a2565b9080611d88565b91610de4610ddf610da385516001600160801b03191690565b95610dda60405180610db86020820185610ea1565b0398610dcc601f199a8b8101845283610231565b610dd4610963565b90611b6f565b61290d565b612215565b90610e50610e25610e1f610df6611988565b97610e116060880199610d6c610e0b8c61110d565b91611331565b516001600160801b03191690565b9661110d565b610e40610e30610252565b6001600160801b03199098168852565b6001600160a01b03166020870152565b6040850152606084015260016080840152600160a0840152610e7a604051938492602084016119fb565b03838101835282610231565b60405193849160208301611a91565b03908101835282610231565b90610eb460209282815194859201610a52565b0190565b6020610ed1918160405193828580945193849201610a52565b8101600181520301902090565b346101b25760c0610ef1610c923661063e565b60ff81549160018060a01b036001820154169060028101546004600383015492015492604051956001600160801b03199060801b168652602086015260408501526060840152610f466080840183831661068d565b60081c16151560a0820152f35b60c4359081151582036101b257565b346101b25760e03660031901126101b2576004356001600160401b0381116101b257610f929036906004016101b7565b60c03660231901126101b257604051610faa816101db565b602435610fb68161090a565b8152604435610fc481610325565b60208201526064356040820152608435606082015260a4359060038210156101b2576107b89261054e926080830152610ffb610f53565b60a083015261113f565b346101b25760003660031901126101b25760206040516401000003d0198152f35b61102f90610eb8565b60018101546001600160a01b039283169291908216831461106c576001600160801b0319905460801b166000526002602052604060002054161490565b505050600190565b6001600160a01b0390819060019061108b90610eb8565b01541691161461109a57600090565b600190565b60038210156106885752565b156110b257565b60405162461bcd60e51b815260206004820152602d60248201527f4163636f756e74206d757374206265206c6f636b656420746f20706572666f7260448201526c36903a3434b99030b1ba34b7b760991b6064820152608490fd5b3561032281610325565b9061112f602091949394604084526040840190610a75565b6001600160a01b03909416910152565b61114c610bb5363661029b565b611155816121ad565b15610471576060013561116781610325565b60208201516001600160a01b039081169116036111a1578061119c600161119460a0610322950151151590565b1515146111fa565b611840565b60405162461bcd60e51b815260206004820152602b60248201527f546865207369676e6572206973206e6f7420746865206f776e6572206f66207460448201526a34329030b1b1b7bab73a1760a91b6064820152608490fd5b1561120157565b60405162461bcd60e51b815260206004820152602760248201527f546865206163636f756e742073686f756c64206265206c6f636b656420627920604482015266191959985d5b1d60ca1b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b6401000003d0199081039190821161128057565b611256565b602f1981019190821161128057565b60361981019190821161128057565b60561981019190821161128057565b9190820391821161128057565b906112c982610280565b6112d66040519182610231565b82815280926112e7601f1991610280565b0190602036910137565b60001981146112805760010190565b906001820180921161128057565b9190820180921161128057565b634e487b7160e01b600052603260045260246000fd5b80511561133e5760200190565b61131b565b90815181101561133e570160200190565b6001600160401b0381116101f65760051b60200190565b81601f820112156101b257805161138181610280565b9261138f6040519485610231565b818452602082840101116101b2576103229160208085019101610a52565b9060209081838203126101b25782516001600160401b03938482116101b257019080601f830112156101b2578151936113e585611354565b9460406113f481519788610231565b8187528587019286600593841b870101958587116101b257878101945b8786106114245750505050505050505090565b85518381116101b25782019060609081601f19848b0301126101b25785519161144c836101fb565b8b84015161145981610325565b8352868401518681116101b25784018a603f820112156101b257808d809201518961148382611354565b9361149082519586610231565b8285528401918c1b830101918d83116101b2578f908b01915b8383106114e25750915050840152830151918583116101b2576114d38a8d8096958196010161136b565b87820152815201950194611411565b819083518152019101908f906114a9565b80516001101561133e5760400190565b80516002101561133e5760600190565b80516003101561133e5760800190565b805182101561133e5760209160051b010190565b9061154182611617565b9180518084146115f25783611555916112b2565b61155e816112bf565b91600094855b8381106115b3575050505080602080611582935183010191016113ad565b915b82518110156115ae57806115a461159e6115a99386611523565b51611726565b6112f1565b611584565b509050565b806115db6115cd6115c76115ed948661130e565b86611343565b516001600160f81b03191690565b881a6115e78288611343565b536112f1565b611564565b50509050565b6040519061160582610216565b600382526254354360e81b6020830152565b600090815b815181101561171f576116326115cd8284611343565b6116556116486115cd6116436115f8565b611331565b6001600160f81b03191690565b6001600160f81b031991821614611676575b50611671906112f1565b61161c565b929091600193845b6116866115f8565b5181101561171557611698818661130e565b8351118015906116dd575b6116b5576116b0906112f1565b61167e565b505091908093505b6116c75738611667565b905061032291506116d66115f8565b519061130e565b506116f46115cd6116ee838861130e565b85611343565b8261170c6116486115cd856117076115f8565b611343565b911614156116a3565b50509190926116bd565b5090505190565b604081015190815190602080910180518051801560001461174a57505050909101a0565b6001810361176457505061175e9051611331565b519201a1565b9193916002810361178d5750509061178761177f8451611331565b5193516114f3565b519301a2565b600381036117be5750506117a18351611331565b51916117b86117b085516114f3565b519451611503565b519401a3565b6004146117cd575b5050505050565b6117d690611331565b51906117e284516114f3565b51926117f96117f18651611503565b519551611513565b519501a438808080806117c6565b9060038110156106885760ff80198354169116179055565b9291602061183861025f9360e0875260e0870190610a75565b94019061069a565b7f13a0f811928fd6fa4086bf6d4837de6d4af824461f9160fdb45dee1aa25e2d016119366001600160801b031992611929600461189086845116604051906020820152601081526108a781610216565b9561189a87610eb8565b90845160801c908254161781556118e06118bd602086015160018060a01b031690565b6001830180546001600160a01b0319166001600160a01b03909216919091179055565b60408401516002820155606084015160038201550161190c60808401516119068161067e565b82611807565b60a08301511515815461ff00191690151560081b61ff0016179055565b604051918291858361181f565b0390a190565b1561194357565b60405162461bcd60e51b815260206004820152601d60248201527f6d7573742062652063616c6c656420636f6e666964656e7469616c6c790000006044820152606490fd5b6040519061199582610216565b6001825260203681840137565b604051906119af82610216565b600b82526a707269766174655f6b657960a81b6020830152565b6001600160401b038116036101b257565b908060209392818452848401376000828201840152601f01601f1916010190565b929160e08452813591611a0d836119c9565b6001600160401b0380931660e086015260208101356101008601526040810135601e19823603018112156101b2578101906020823592019382116101b25781360384136101b257611838611a806060611a7961025f9760209660806101208d01526101608c01916119da565b9301610336565b6001600160a01b0316610140880152565b9060049163e62806a760e01b8152611ab28251809360208685019101610a52565b010190565b3d15611ae2573d90611ac882610280565b91611ad66040519384610231565b82523d6000602084013e565b606090565b90604061032292634203000081528160208201520190610a75565b90604061032292634010000381528160208201520190610a75565b6342010000600080808080855af190611b34611ab7565b9115611b4257506020015190565b611b6b6040519283926375fff46760e01b84526004840152604060248401526044830190610a75565b0390fd5b91611ba7611bba600093928493610e9560405194859260208401996001600160801b0319168a52606060408501526080840190610a75565b601f199384848303016060850152610a75565b5163420200009382855af190611bce611ab7565b9115611b42575050565b90815180825260208080930193019160005b828110611bf8575050505090565b83516001600160a01b031685529381019392810192600101611bea565b91611c4590611c376103229593600a8652608060208701526080860190611bd8565b908482036040860152611bd8565b916060818403910152610a75565b519061025f8261090a565b519061025f826119c9565b81601f820112156101b257805191611c8083611354565b92611c8e6040519485610231565b808452602092838086019260051b8201019283116101b2578301905b828210611cb8575050505090565b8380918351611cc681610325565b815201910190611caa565b906020828203126101b25781516001600160401b03928382116101b257019060c0828203126101b257611d02610252565b92611d0c83611c53565b8452611d1a60208401611c53565b6020850152611d2b60408401611c5e565b604085015260608301518181116101b25782611d48918501611c69565b606085015260808301518181116101b25782611d65918501611c69565b608085015260a08301519081116101b257611d80920161136b565b60a082015290565b60a092611dd260405193611d9b856101db565b6060600096868880985287602082015287604082015282808201528260808201520152610899604051938492602084019687611c15565b51908263420300005af1611de4611ab7565b9015611dfd578060208061032293518301019101611cd1565b6040516375fff46760e01b8152908190611b6b9060048301611ae7565b604051906020808301906000808095818552838152611e3881610216565b5163532000039482865af191611e4c611ab7565b9215611e87575081518201938183860312611e845781830151906001600160401b038211611e8457508161032294950192010161136b565b80fd5b9050611b6b6040519283926375fff46760e01b84526004840152604060248401526044830190610a75565b9060ff6004611ece60c09396959660e0865260e0860190610a75565b8654608090811b6001600160801b031916602087015260018801546001600160a01b0316604087015260028801546060870152600388015490860152950154611f1c60a0850183831661068d565b60081c161515910152565b919091611f35610d29611b1d565b611f416105b2826121ad565b610471576105b26105ac6060611f57930161110d565b61062c57611f746004611f6984610eb8565b015460081c60ff1690565b6120085761054e611fe891611fd6611fc8611faf7f38c6e29fd15ff9d955e6181fe5f870dbd096042948379eef3b18e4f976594ed896610eb8565b600181015461041a906001600160a01b0316151561201a565b611fd0610963565b906120a3565b90611fe38251151561205f565b612118565b0390a160405163826b946960e01b60208201526103228160248101610899565b6040516334405dbd60e21b8152600490fd5b1561202157565b60405162461bcd60e51b81526020600482015260166024820152751058d8dbdd5b9d08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b1561206657565b60405162461bcd60e51b815260206004820152601560248201527414da59db9a5b99c81ad95e481b9bdd08199bdd5b99605a1b6044820152606490fd5b9060006108996120d5829360405192839160208301976001600160801b03191688526040808401526060830190610a75565b5163420200019382855af1906120e9611ab7565b9115611b42575090565b906020828203126101b25781516001600160401b0381116101b257610322920161136b565b90612121611b1d565b156101b25760009182916121656040519182610e9561214c6020830196606088526080840190610a75565b876040840152601f199384848303016060850152610a75565b51908263401000035af1612177611ab7565b90156121905780602080610322935183010191016120f3565b6040516375fff46760e01b8152908190611b6b9060048301611b02565b8035906121b9826119c9565b6040810135601e19823603018112156101b2578101908135916001600160401b0383116101b2576020019282360384136101b257602061220c6103229560608501359561220587610325565b36916102d0565b92013590612704565b61221e90612368565b92919083151584816122f3575b50806122eb575b156122b55760009360016401000003d019825b612272575050506401000003d01984800991826401000003d0199109936401000003d01992839109900990565b806122a7612286856122ad949a969a61231a565b93946401000003d0199061229c8288880961126c565b900894988094612355565b906112b2565b919082612245565b60405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b6044820152606490fd5b506001612232565b6401000003d019141590503861222b565b634e487b7160e01b600052601260045260246000fd5b8115612324570490565b612304565b908160041b918083046010149015171561128057565b908160011b918083046002149015171561128057565b8181029291811591840414171561128057565b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798917f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8600192801561240d576000948592918590805b6123cb5750505050929190565b600181166123ef575b906123e49160011c93849361267b565b9093919290916123be565b9390838382986123e49a61240295612482565b9097509590936123d4565b509190565b60405190608082018281106001600160401b038211176101f6576040526080368337565b1561243d57565b60405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606490fd5b91949290959395821580612673575b61266957811580612661575b612657576125566124ac612412565b6401000003d0198880098082526401000003d01990890960208201526401000003d01986800960408201818152906401000003d01990880960608301526124f1610261565b956401000003d01991519009928386526401000003d01990606083015190099060208601948286526401000003d019908251900990604087019a828c5260206401000003d0199201519009906060870194828652149182159261264c575b5050612436565b61255e612412565b96516401000003d01990612572855161126c565b90088752516401000003d01990612589835161126c565b900890612635602088019383855288516401000003d01981800960408b01818152916401000003d019910960608b01958187526125cc6401000003d0199261126c565b906401000003d01990800908825182516401000003d01992916125f79184918291900960020961126c565b90089551915190516401000003d01991096401000003d0199190829061261c8861126c565b90089009915192516401000003d019938491900961126c565b900894519094936401000003d01992839109900990565b14159050388061254f565b9550509050929190565b50861561249d565b5091935050929190565b508015612491565b9290918015610322576401000003d0199081848009908280828009968180808080808987096004099b80096000099280096003090891838780088403848111611280578490818580090890818503908582116112805785818192096008098503908582116112805785948580949281939b08900908940960020990565b6040513d6000823e3d90fd5b9190916001600160401b03811642116128075760405160208101916001600160401b0360c01b9060c01b1682526bffffffffffffffffffffffff198560601b166028820152601c815261275681610216565b51902082036127ff576127d86000916127b26020946040516127a98161089989820194856039917f194d7963656c205369676e6564204d6573736167653a0a333200000000000000825260198201520190565b5190209161286e565b6040805194855260ff909116602085015283019190915260608201529081906080820190565b838052039060015afa156127fa576000516001600160a01b0390811691161490565b6126f8565b505050600090565b50505050600090565b60ff601b9116019060ff821161128057565b1561282957565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964207369676e6174757265202776272076616c756500000000006044820152606490fd5b60418151036128c8576020810151916060604083015192015160001a90601b82106128b8575b61025f60ff8316601b81149081156128ad575b50612822565b601c915014386128a7565b906128c290612810565b90612894565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606490fd5b906000805b83518110156129f95761293a61293461292e6115cd8488611343565b60f81c90565b60ff1690565b6030811015806129ee575b6129d2575b6041811015806129c7575b6129ab575b6061811015806129a0575b612979575b50612974906112f1565b612912565b6129999061299361298d6129749495612329565b916112a3565b9061130e565b919061296a565b506066811115612965565b916129b86129c191612329565b61299384611294565b9161295a565b506046811115612955565b916129df6129e891612329565b61299384611285565b9161294a565b506039811115612945565b509150565b60405190612a0b82610216565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b6020830152565b8115612324570690565b90612a47612a42835161233f565b6112bf565b612a4f6129fe565b600093845b8151811015612ae85780612ac56115cd6115c7612a7a61292e6115cd612ae39789611343565b612a956115cd612a8f8a5160ff80951661231a565b8a611343565b612aab612aa18761233f565b918d1a918b611343565b53612abc61292e6115cd878a611343565b88519116612a2a565b6115e7612ad9612ad48461233f565b611300565b91891a9187611343565b612a54565b505060405161060f60f31b602082015292935061032291839150610899906022830190610ea156fea26469706673582212209e629d33dee72272312430700bb0e381617ee4a95f8a17e81b9b2fff581adb1a64736f6c63430008130033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// AA is a free data retrieval call binding the contract method 0x997da8d4.
//
// Solidity: function AA() view returns(uint256)
func (_Contract *ContractCaller) AA(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "AA")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AA is a free data retrieval call binding the contract method 0x997da8d4.
//
// Solidity: function AA() view returns(uint256)
func (_Contract *ContractSession) AA() (*big.Int, error) {
	return _Contract.Contract.AA(&_Contract.CallOpts)
}

// AA is a free data retrieval call binding the contract method 0x997da8d4.
//
// Solidity: function AA() view returns(uint256)
func (_Contract *ContractCallerSession) AA() (*big.Int, error) {
	return _Contract.Contract.AA(&_Contract.CallOpts)
}

// BB is a free data retrieval call binding the contract method 0x5727dc5c.
//
// Solidity: function BB() view returns(uint256)
func (_Contract *ContractCaller) BB(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "BB")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BB is a free data retrieval call binding the contract method 0x5727dc5c.
//
// Solidity: function BB() view returns(uint256)
func (_Contract *ContractSession) BB() (*big.Int, error) {
	return _Contract.Contract.BB(&_Contract.CallOpts)
}

// BB is a free data retrieval call binding the contract method 0x5727dc5c.
//
// Solidity: function BB() view returns(uint256)
func (_Contract *ContractCallerSession) BB() (*big.Int, error) {
	return _Contract.Contract.BB(&_Contract.CallOpts)
}

// GX is a free data retrieval call binding the contract method 0x03a507be.
//
// Solidity: function GX() view returns(uint256)
func (_Contract *ContractCaller) GX(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "GX")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GX is a free data retrieval call binding the contract method 0x03a507be.
//
// Solidity: function GX() view returns(uint256)
func (_Contract *ContractSession) GX() (*big.Int, error) {
	return _Contract.Contract.GX(&_Contract.CallOpts)
}

// GX is a free data retrieval call binding the contract method 0x03a507be.
//
// Solidity: function GX() view returns(uint256)
func (_Contract *ContractCallerSession) GX() (*big.Int, error) {
	return _Contract.Contract.GX(&_Contract.CallOpts)
}

// GY is a free data retrieval call binding the contract method 0x7a308a4c.
//
// Solidity: function GY() view returns(uint256)
func (_Contract *ContractCaller) GY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "GY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GY is a free data retrieval call binding the contract method 0x7a308a4c.
//
// Solidity: function GY() view returns(uint256)
func (_Contract *ContractSession) GY() (*big.Int, error) {
	return _Contract.Contract.GY(&_Contract.CallOpts)
}

// GY is a free data retrieval call binding the contract method 0x7a308a4c.
//
// Solidity: function GY() view returns(uint256)
func (_Contract *ContractCallerSession) GY() (*big.Int, error) {
	return _Contract.Contract.GY(&_Contract.CallOpts)
}

// KEYFA is a free data retrieval call binding the contract method 0x761ca154.
//
// Solidity: function KEY_FA() view returns(string)
func (_Contract *ContractCaller) KEYFA(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "KEY_FA")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// KEYFA is a free data retrieval call binding the contract method 0x761ca154.
//
// Solidity: function KEY_FA() view returns(string)
func (_Contract *ContractSession) KEYFA() (string, error) {
	return _Contract.Contract.KEYFA(&_Contract.CallOpts)
}

// KEYFA is a free data retrieval call binding the contract method 0x761ca154.
//
// Solidity: function KEY_FA() view returns(string)
func (_Contract *ContractCallerSession) KEYFA() (string, error) {
	return _Contract.Contract.KEYFA(&_Contract.CallOpts)
}

// PP is a free data retrieval call binding the contract method 0xeeeac01e.
//
// Solidity: function PP() view returns(uint256)
func (_Contract *ContractCaller) PP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "PP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PP is a free data retrieval call binding the contract method 0xeeeac01e.
//
// Solidity: function PP() view returns(uint256)
func (_Contract *ContractSession) PP() (*big.Int, error) {
	return _Contract.Contract.PP(&_Contract.CallOpts)
}

// PP is a free data retrieval call binding the contract method 0xeeeac01e.
//
// Solidity: function PP() view returns(uint256)
func (_Contract *ContractCallerSession) PP() (*big.Int, error) {
	return _Contract.Contract.PP(&_Contract.CallOpts)
}

// AccountApprovals is a free data retrieval call binding the contract method 0x69093789.
//
// Solidity: function accountApprovals(bytes16 ) view returns(address)
func (_Contract *ContractCaller) AccountApprovals(opts *bind.CallOpts, arg0 [16]byte) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "accountApprovals", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountApprovals is a free data retrieval call binding the contract method 0x69093789.
//
// Solidity: function accountApprovals(bytes16 ) view returns(address)
func (_Contract *ContractSession) AccountApprovals(arg0 [16]byte) (common.Address, error) {
	return _Contract.Contract.AccountApprovals(&_Contract.CallOpts, arg0)
}

// AccountApprovals is a free data retrieval call binding the contract method 0x69093789.
//
// Solidity: function accountApprovals(bytes16 ) view returns(address)
func (_Contract *ContractCallerSession) AccountApprovals(arg0 [16]byte) (common.Address, error) {
	return _Contract.Contract.AccountApprovals(&_Contract.CallOpts, arg0)
}

// AccountsStore is a free data retrieval call binding the contract method 0xe49520f7.
//
// Solidity: function accountsStore(string ) view returns(bytes16 accountId, address owner, uint256 publicKeyX, uint256 publicKeyY, uint8 signatureAlgorithm, bool isLocked)
func (_Contract *ContractCaller) AccountsStore(opts *bind.CallOpts, arg0 string) (struct {
	AccountId          [16]byte
	Owner              common.Address
	PublicKeyX         *big.Int
	PublicKeyY         *big.Int
	SignatureAlgorithm uint8
	IsLocked           bool
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "accountsStore", arg0)

	outstruct := new(struct {
		AccountId          [16]byte
		Owner              common.Address
		PublicKeyX         *big.Int
		PublicKeyY         *big.Int
		SignatureAlgorithm uint8
		IsLocked           bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AccountId = *abi.ConvertType(out[0], new([16]byte)).(*[16]byte)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.PublicKeyX = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PublicKeyY = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.SignatureAlgorithm = *abi.ConvertType(out[4], new(uint8)).(*uint8)
	outstruct.IsLocked = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// AccountsStore is a free data retrieval call binding the contract method 0xe49520f7.
//
// Solidity: function accountsStore(string ) view returns(bytes16 accountId, address owner, uint256 publicKeyX, uint256 publicKeyY, uint8 signatureAlgorithm, bool isLocked)
func (_Contract *ContractSession) AccountsStore(arg0 string) (struct {
	AccountId          [16]byte
	Owner              common.Address
	PublicKeyX         *big.Int
	PublicKeyY         *big.Int
	SignatureAlgorithm uint8
	IsLocked           bool
}, error) {
	return _Contract.Contract.AccountsStore(&_Contract.CallOpts, arg0)
}

// AccountsStore is a free data retrieval call binding the contract method 0xe49520f7.
//
// Solidity: function accountsStore(string ) view returns(bytes16 accountId, address owner, uint256 publicKeyX, uint256 publicKeyY, uint8 signatureAlgorithm, bool isLocked)
func (_Contract *ContractCallerSession) AccountsStore(arg0 string) (struct {
	AccountId          [16]byte
	Owner              common.Address
	PublicKeyX         *big.Int
	PublicKeyY         *big.Int
	SignatureAlgorithm uint8
	IsLocked           bool
}, error) {
	return _Contract.Contract.AccountsStore(&_Contract.CallOpts, arg0)
}

// GetAccount is a free data retrieval call binding the contract method 0x4518f6b3.
//
// Solidity: function getAccount(string accountId) view returns((bytes16,address,uint256,uint256,uint8,bool))
func (_Contract *ContractCaller) GetAccount(opts *bind.CallOpts, accountId string) (ITransferableAccountStoreAccount, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getAccount", accountId)

	if err != nil {
		return *new(ITransferableAccountStoreAccount), err
	}

	out0 := *abi.ConvertType(out[0], new(ITransferableAccountStoreAccount)).(*ITransferableAccountStoreAccount)

	return out0, err

}

// GetAccount is a free data retrieval call binding the contract method 0x4518f6b3.
//
// Solidity: function getAccount(string accountId) view returns((bytes16,address,uint256,uint256,uint8,bool))
func (_Contract *ContractSession) GetAccount(accountId string) (ITransferableAccountStoreAccount, error) {
	return _Contract.Contract.GetAccount(&_Contract.CallOpts, accountId)
}

// GetAccount is a free data retrieval call binding the contract method 0x4518f6b3.
//
// Solidity: function getAccount(string accountId) view returns((bytes16,address,uint256,uint256,uint8,bool))
func (_Contract *ContractCallerSession) GetAccount(accountId string) (ITransferableAccountStoreAccount, error) {
	return _Contract.Contract.GetAccount(&_Contract.CallOpts, accountId)
}

// IsAccountLocked is a free data retrieval call binding the contract method 0xa69deb2e.
//
// Solidity: function isAccountLocked(string accountId) view returns(bool)
func (_Contract *ContractCaller) IsAccountLocked(opts *bind.CallOpts, accountId string) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isAccountLocked", accountId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAccountLocked is a free data retrieval call binding the contract method 0xa69deb2e.
//
// Solidity: function isAccountLocked(string accountId) view returns(bool)
func (_Contract *ContractSession) IsAccountLocked(accountId string) (bool, error) {
	return _Contract.Contract.IsAccountLocked(&_Contract.CallOpts, accountId)
}

// IsAccountLocked is a free data retrieval call binding the contract method 0xa69deb2e.
//
// Solidity: function isAccountLocked(string accountId) view returns(bool)
func (_Contract *ContractCallerSession) IsAccountLocked(accountId string) (bool, error) {
	return _Contract.Contract.IsAccountLocked(&_Contract.CallOpts, accountId)
}

// IsApproved is a free data retrieval call binding the contract method 0xba545e85.
//
// Solidity: function isApproved(string accountId, address _address) view returns(bool)
func (_Contract *ContractCaller) IsApproved(opts *bind.CallOpts, accountId string, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isApproved", accountId, _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApproved is a free data retrieval call binding the contract method 0xba545e85.
//
// Solidity: function isApproved(string accountId, address _address) view returns(bool)
func (_Contract *ContractSession) IsApproved(accountId string, _address common.Address) (bool, error) {
	return _Contract.Contract.IsApproved(&_Contract.CallOpts, accountId, _address)
}

// IsApproved is a free data retrieval call binding the contract method 0xba545e85.
//
// Solidity: function isApproved(string accountId, address _address) view returns(bool)
func (_Contract *ContractCallerSession) IsApproved(accountId string, _address common.Address) (bool, error) {
	return _Contract.Contract.IsApproved(&_Contract.CallOpts, accountId, _address)
}

// IsOwner is a free data retrieval call binding the contract method 0xbde1eee7.
//
// Solidity: function isOwner(string accountId, address _address) view returns(bool)
func (_Contract *ContractCaller) IsOwner(opts *bind.CallOpts, accountId string, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isOwner", accountId, _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOwner is a free data retrieval call binding the contract method 0xbde1eee7.
//
// Solidity: function isOwner(string accountId, address _address) view returns(bool)
func (_Contract *ContractSession) IsOwner(accountId string, _address common.Address) (bool, error) {
	return _Contract.Contract.IsOwner(&_Contract.CallOpts, accountId, _address)
}

// IsOwner is a free data retrieval call binding the contract method 0xbde1eee7.
//
// Solidity: function isOwner(string accountId, address _address) view returns(bool)
func (_Contract *ContractCallerSession) IsOwner(accountId string, _address common.Address) (bool, error) {
	return _Contract.Contract.IsOwner(&_Contract.CallOpts, accountId, _address)
}

// VerifyTimedSignature is a free data retrieval call binding the contract method 0x6243c382.
//
// Solidity: function verifyTimedSignature((uint64,bytes32,bytes,address) timedSignature) view returns(bool)
func (_Contract *ContractCaller) VerifyTimedSignature(opts *bind.CallOpts, timedSignature SignatureVerifierTimedSignature) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "verifyTimedSignature", timedSignature)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyTimedSignature is a free data retrieval call binding the contract method 0x6243c382.
//
// Solidity: function verifyTimedSignature((uint64,bytes32,bytes,address) timedSignature) view returns(bool)
func (_Contract *ContractSession) VerifyTimedSignature(timedSignature SignatureVerifierTimedSignature) (bool, error) {
	return _Contract.Contract.VerifyTimedSignature(&_Contract.CallOpts, timedSignature)
}

// VerifyTimedSignature is a free data retrieval call binding the contract method 0x6243c382.
//
// Solidity: function verifyTimedSignature((uint64,bytes32,bytes,address) timedSignature) view returns(bool)
func (_Contract *ContractCallerSession) VerifyTimedSignature(timedSignature SignatureVerifierTimedSignature) (bool, error) {
	return _Contract.Contract.VerifyTimedSignature(&_Contract.CallOpts, timedSignature)
}

// ApproveAddress is a paid mutator transaction binding the contract method 0x58ee5f38.
//
// Solidity: function approveAddress((uint64,bytes32,bytes,address) timedSignature, string accountId, address _address) returns()
func (_Contract *ContractTransactor) ApproveAddress(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "approveAddress", timedSignature, accountId, _address)
}

// ApproveAddress is a paid mutator transaction binding the contract method 0x58ee5f38.
//
// Solidity: function approveAddress((uint64,bytes32,bytes,address) timedSignature, string accountId, address _address) returns()
func (_Contract *ContractSession) ApproveAddress(timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.ApproveAddress(&_Contract.TransactOpts, timedSignature, accountId, _address)
}

// ApproveAddress is a paid mutator transaction binding the contract method 0x58ee5f38.
//
// Solidity: function approveAddress((uint64,bytes32,bytes,address) timedSignature, string accountId, address _address) returns()
func (_Contract *ContractTransactorSession) ApproveAddress(timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.ApproveAddress(&_Contract.TransactOpts, timedSignature, accountId, _address)
}

// CreateAccount is a paid mutator transaction binding the contract method 0xda23f4e3.
//
// Solidity: function createAccount((uint64,bytes32,bytes,address) timedSignature) returns(bytes)
func (_Contract *ContractTransactor) CreateAccount(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "createAccount", timedSignature)
}

// CreateAccount is a paid mutator transaction binding the contract method 0xda23f4e3.
//
// Solidity: function createAccount((uint64,bytes32,bytes,address) timedSignature) returns(bytes)
func (_Contract *ContractSession) CreateAccount(timedSignature SignatureVerifierTimedSignature) (*types.Transaction, error) {
	return _Contract.Contract.CreateAccount(&_Contract.TransactOpts, timedSignature)
}

// CreateAccount is a paid mutator transaction binding the contract method 0xda23f4e3.
//
// Solidity: function createAccount((uint64,bytes32,bytes,address) timedSignature) returns(bytes)
func (_Contract *ContractTransactorSession) CreateAccount(timedSignature SignatureVerifierTimedSignature) (*types.Transaction, error) {
	return _Contract.Contract.CreateAccount(&_Contract.TransactOpts, timedSignature)
}

// CreateAccountCallback is a paid mutator transaction binding the contract method 0xe62806a7.
//
// Solidity: function createAccountCallback((uint64,bytes32,bytes,address) timedSignature, (bytes16,address,uint256,uint256,uint8,bool) account) returns(string)
func (_Contract *ContractTransactor) CreateAccountCallback(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, account ITransferableAccountStoreAccount) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "createAccountCallback", timedSignature, account)
}

// CreateAccountCallback is a paid mutator transaction binding the contract method 0xe62806a7.
//
// Solidity: function createAccountCallback((uint64,bytes32,bytes,address) timedSignature, (bytes16,address,uint256,uint256,uint8,bool) account) returns(string)
func (_Contract *ContractSession) CreateAccountCallback(timedSignature SignatureVerifierTimedSignature, account ITransferableAccountStoreAccount) (*types.Transaction, error) {
	return _Contract.Contract.CreateAccountCallback(&_Contract.TransactOpts, timedSignature, account)
}

// CreateAccountCallback is a paid mutator transaction binding the contract method 0xe62806a7.
//
// Solidity: function createAccountCallback((uint64,bytes32,bytes,address) timedSignature, (bytes16,address,uint256,uint256,uint8,bool) account) returns(string)
func (_Contract *ContractTransactorSession) CreateAccountCallback(timedSignature SignatureVerifierTimedSignature, account ITransferableAccountStoreAccount) (*types.Transaction, error) {
	return _Contract.Contract.CreateAccountCallback(&_Contract.TransactOpts, timedSignature, account)
}

// DeleteAccount is a paid mutator transaction binding the contract method 0x8e62ab02.
//
// Solidity: function deleteAccount((uint64,bytes32,bytes,address) timedSignature, string accountId) returns()
func (_Contract *ContractTransactor) DeleteAccount(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "deleteAccount", timedSignature, accountId)
}

// DeleteAccount is a paid mutator transaction binding the contract method 0x8e62ab02.
//
// Solidity: function deleteAccount((uint64,bytes32,bytes,address) timedSignature, string accountId) returns()
func (_Contract *ContractSession) DeleteAccount(timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Contract.Contract.DeleteAccount(&_Contract.TransactOpts, timedSignature, accountId)
}

// DeleteAccount is a paid mutator transaction binding the contract method 0x8e62ab02.
//
// Solidity: function deleteAccount((uint64,bytes32,bytes,address) timedSignature, string accountId) returns()
func (_Contract *ContractTransactorSession) DeleteAccount(timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Contract.Contract.DeleteAccount(&_Contract.TransactOpts, timedSignature, accountId)
}

// RevokeApproval is a paid mutator transaction binding the contract method 0x0b70e71b.
//
// Solidity: function revokeApproval((uint64,bytes32,bytes,address) timedSignature, string accountId, address _address) returns()
func (_Contract *ContractTransactor) RevokeApproval(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "revokeApproval", timedSignature, accountId, _address)
}

// RevokeApproval is a paid mutator transaction binding the contract method 0x0b70e71b.
//
// Solidity: function revokeApproval((uint64,bytes32,bytes,address) timedSignature, string accountId, address _address) returns()
func (_Contract *ContractSession) RevokeApproval(timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RevokeApproval(&_Contract.TransactOpts, timedSignature, accountId, _address)
}

// RevokeApproval is a paid mutator transaction binding the contract method 0x0b70e71b.
//
// Solidity: function revokeApproval((uint64,bytes32,bytes,address) timedSignature, string accountId, address _address) returns()
func (_Contract *ContractTransactorSession) RevokeApproval(timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Contract.Contract.RevokeApproval(&_Contract.TransactOpts, timedSignature, accountId, _address)
}

// Sign is a paid mutator transaction binding the contract method 0x7e89e7af.
//
// Solidity: function sign((uint64,bytes32,bytes,address) timedSignature, string accountId, bytes data) returns(bytes)
func (_Contract *ContractTransactor) Sign(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string, data []byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "sign", timedSignature, accountId, data)
}

// Sign is a paid mutator transaction binding the contract method 0x7e89e7af.
//
// Solidity: function sign((uint64,bytes32,bytes,address) timedSignature, string accountId, bytes data) returns(bytes)
func (_Contract *ContractSession) Sign(timedSignature SignatureVerifierTimedSignature, accountId string, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.Sign(&_Contract.TransactOpts, timedSignature, accountId, data)
}

// Sign is a paid mutator transaction binding the contract method 0x7e89e7af.
//
// Solidity: function sign((uint64,bytes32,bytes,address) timedSignature, string accountId, bytes data) returns(bytes)
func (_Contract *ContractTransactorSession) Sign(timedSignature SignatureVerifierTimedSignature, accountId string, data []byte) (*types.Transaction, error) {
	return _Contract.Contract.Sign(&_Contract.TransactOpts, timedSignature, accountId, data)
}

// SignCallback is a paid mutator transaction binding the contract method 0x826b9469.
//
// Solidity: function signCallback() returns()
func (_Contract *ContractTransactor) SignCallback(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "signCallback")
}

// SignCallback is a paid mutator transaction binding the contract method 0x826b9469.
//
// Solidity: function signCallback() returns()
func (_Contract *ContractSession) SignCallback() (*types.Transaction, error) {
	return _Contract.Contract.SignCallback(&_Contract.TransactOpts)
}

// SignCallback is a paid mutator transaction binding the contract method 0x826b9469.
//
// Solidity: function signCallback() returns()
func (_Contract *ContractTransactorSession) SignCallback() (*types.Transaction, error) {
	return _Contract.Contract.SignCallback(&_Contract.TransactOpts)
}

// TransferAccount is a paid mutator transaction binding the contract method 0x4374cbbf.
//
// Solidity: function transferAccount((uint64,bytes32,bytes,address) timedSignature, string accountId, address to) returns()
func (_Contract *ContractTransactor) TransferAccount(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string, to common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferAccount", timedSignature, accountId, to)
}

// TransferAccount is a paid mutator transaction binding the contract method 0x4374cbbf.
//
// Solidity: function transferAccount((uint64,bytes32,bytes,address) timedSignature, string accountId, address to) returns()
func (_Contract *ContractSession) TransferAccount(timedSignature SignatureVerifierTimedSignature, accountId string, to common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferAccount(&_Contract.TransactOpts, timedSignature, accountId, to)
}

// TransferAccount is a paid mutator transaction binding the contract method 0x4374cbbf.
//
// Solidity: function transferAccount((uint64,bytes32,bytes,address) timedSignature, string accountId, address to) returns()
func (_Contract *ContractTransactorSession) TransferAccount(timedSignature SignatureVerifierTimedSignature, accountId string, to common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferAccount(&_Contract.TransactOpts, timedSignature, accountId, to)
}

// UnlockAccount is a paid mutator transaction binding the contract method 0x3c1884e9.
//
// Solidity: function unlockAccount((uint64,bytes32,bytes,address) timedSignature, string accountId) returns()
func (_Contract *ContractTransactor) UnlockAccount(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "unlockAccount", timedSignature, accountId)
}

// UnlockAccount is a paid mutator transaction binding the contract method 0x3c1884e9.
//
// Solidity: function unlockAccount((uint64,bytes32,bytes,address) timedSignature, string accountId) returns()
func (_Contract *ContractSession) UnlockAccount(timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Contract.Contract.UnlockAccount(&_Contract.TransactOpts, timedSignature, accountId)
}

// UnlockAccount is a paid mutator transaction binding the contract method 0x3c1884e9.
//
// Solidity: function unlockAccount((uint64,bytes32,bytes,address) timedSignature, string accountId) returns()
func (_Contract *ContractTransactorSession) UnlockAccount(timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Contract.Contract.UnlockAccount(&_Contract.TransactOpts, timedSignature, accountId)
}

// ContractAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the Contract contract.
type ContractAccountCreatedIterator struct {
	Event *ContractAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAccountCreated represents a AccountCreated event raised by the Contract contract.
type ContractAccountCreated struct {
	AccountId string
	Account   ITransferableAccountStoreAccount
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0x13a0f811928fd6fa4086bf6d4837de6d4af824461f9160fdb45dee1aa25e2d01.
//
// Solidity: event AccountCreated(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Contract *ContractFilterer) FilterAccountCreated(opts *bind.FilterOpts) (*ContractAccountCreatedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "AccountCreated")
	if err != nil {
		return nil, err
	}
	return &ContractAccountCreatedIterator{contract: _Contract.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0x13a0f811928fd6fa4086bf6d4837de6d4af824461f9160fdb45dee1aa25e2d01.
//
// Solidity: event AccountCreated(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Contract *ContractFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *ContractAccountCreated) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "AccountCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAccountCreated)
				if err := _Contract.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0x13a0f811928fd6fa4086bf6d4837de6d4af824461f9160fdb45dee1aa25e2d01.
//
// Solidity: event AccountCreated(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Contract *ContractFilterer) ParseAccountCreated(log types.Log) (*ContractAccountCreated, error) {
	event := new(ContractAccountCreated)
	if err := _Contract.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAccountDeletedIterator is returned from FilterAccountDeleted and is used to iterate over the raw logs and unpacked data for AccountDeleted events raised by the Contract contract.
type ContractAccountDeletedIterator struct {
	Event *ContractAccountDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAccountDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAccountDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAccountDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAccountDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAccountDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAccountDeleted represents a AccountDeleted event raised by the Contract contract.
type ContractAccountDeleted struct {
	AccountId string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountDeleted is a free log retrieval operation binding the contract event 0x68621f32198be2aabd285ff157a36182342ebc518a0e054c08a1461ae0d86431.
//
// Solidity: event AccountDeleted(string accountId)
func (_Contract *ContractFilterer) FilterAccountDeleted(opts *bind.FilterOpts) (*ContractAccountDeletedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "AccountDeleted")
	if err != nil {
		return nil, err
	}
	return &ContractAccountDeletedIterator{contract: _Contract.contract, event: "AccountDeleted", logs: logs, sub: sub}, nil
}

// WatchAccountDeleted is a free log subscription operation binding the contract event 0x68621f32198be2aabd285ff157a36182342ebc518a0e054c08a1461ae0d86431.
//
// Solidity: event AccountDeleted(string accountId)
func (_Contract *ContractFilterer) WatchAccountDeleted(opts *bind.WatchOpts, sink chan<- *ContractAccountDeleted) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "AccountDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAccountDeleted)
				if err := _Contract.contract.UnpackLog(event, "AccountDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountDeleted is a log parse operation binding the contract event 0x68621f32198be2aabd285ff157a36182342ebc518a0e054c08a1461ae0d86431.
//
// Solidity: event AccountDeleted(string accountId)
func (_Contract *ContractFilterer) ParseAccountDeleted(log types.Log) (*ContractAccountDeleted, error) {
	event := new(ContractAccountDeleted)
	if err := _Contract.contract.UnpackLog(event, "AccountDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAccountLockedIterator is returned from FilterAccountLocked and is used to iterate over the raw logs and unpacked data for AccountLocked events raised by the Contract contract.
type ContractAccountLockedIterator struct {
	Event *ContractAccountLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAccountLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAccountLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAccountLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAccountLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAccountLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAccountLocked represents a AccountLocked event raised by the Contract contract.
type ContractAccountLocked struct {
	AccountId string
	Duration  *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountLocked is a free log retrieval operation binding the contract event 0xc02feab39b0c816c53795326d5d479bff481ce2565450ad60d1e54852dc2d589.
//
// Solidity: event AccountLocked(string accountId, uint256 duration)
func (_Contract *ContractFilterer) FilterAccountLocked(opts *bind.FilterOpts) (*ContractAccountLockedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "AccountLocked")
	if err != nil {
		return nil, err
	}
	return &ContractAccountLockedIterator{contract: _Contract.contract, event: "AccountLocked", logs: logs, sub: sub}, nil
}

// WatchAccountLocked is a free log subscription operation binding the contract event 0xc02feab39b0c816c53795326d5d479bff481ce2565450ad60d1e54852dc2d589.
//
// Solidity: event AccountLocked(string accountId, uint256 duration)
func (_Contract *ContractFilterer) WatchAccountLocked(opts *bind.WatchOpts, sink chan<- *ContractAccountLocked) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "AccountLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAccountLocked)
				if err := _Contract.contract.UnpackLog(event, "AccountLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountLocked is a log parse operation binding the contract event 0xc02feab39b0c816c53795326d5d479bff481ce2565450ad60d1e54852dc2d589.
//
// Solidity: event AccountLocked(string accountId, uint256 duration)
func (_Contract *ContractFilterer) ParseAccountLocked(log types.Log) (*ContractAccountLocked, error) {
	event := new(ContractAccountLocked)
	if err := _Contract.contract.UnpackLog(event, "AccountLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAccountTransferredIterator is returned from FilterAccountTransferred and is used to iterate over the raw logs and unpacked data for AccountTransferred events raised by the Contract contract.
type ContractAccountTransferredIterator struct {
	Event *ContractAccountTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAccountTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAccountTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAccountTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAccountTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAccountTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAccountTransferred represents a AccountTransferred event raised by the Contract contract.
type ContractAccountTransferred struct {
	AccountId string
	Account   ITransferableAccountStoreAccount
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountTransferred is a free log retrieval operation binding the contract event 0x72b22feb9960f9be8120ca344ab76eda8b88fec09813b9dc25b8f079e3c46437.
//
// Solidity: event AccountTransferred(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Contract *ContractFilterer) FilterAccountTransferred(opts *bind.FilterOpts) (*ContractAccountTransferredIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "AccountTransferred")
	if err != nil {
		return nil, err
	}
	return &ContractAccountTransferredIterator{contract: _Contract.contract, event: "AccountTransferred", logs: logs, sub: sub}, nil
}

// WatchAccountTransferred is a free log subscription operation binding the contract event 0x72b22feb9960f9be8120ca344ab76eda8b88fec09813b9dc25b8f079e3c46437.
//
// Solidity: event AccountTransferred(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Contract *ContractFilterer) WatchAccountTransferred(opts *bind.WatchOpts, sink chan<- *ContractAccountTransferred) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "AccountTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAccountTransferred)
				if err := _Contract.contract.UnpackLog(event, "AccountTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountTransferred is a log parse operation binding the contract event 0x72b22feb9960f9be8120ca344ab76eda8b88fec09813b9dc25b8f079e3c46437.
//
// Solidity: event AccountTransferred(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Contract *ContractFilterer) ParseAccountTransferred(log types.Log) (*ContractAccountTransferred, error) {
	event := new(ContractAccountTransferred)
	if err := _Contract.contract.UnpackLog(event, "AccountTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAccountUnlockedIterator is returned from FilterAccountUnlocked and is used to iterate over the raw logs and unpacked data for AccountUnlocked events raised by the Contract contract.
type ContractAccountUnlockedIterator struct {
	Event *ContractAccountUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAccountUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAccountUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAccountUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAccountUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAccountUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAccountUnlocked represents a AccountUnlocked event raised by the Contract contract.
type ContractAccountUnlocked struct {
	AccountId string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountUnlocked is a free log retrieval operation binding the contract event 0x7f6f9b5b10671e68dda65ac00050fba4d555889d122fcbbbb2d4739ea25a0179.
//
// Solidity: event AccountUnlocked(string accountId)
func (_Contract *ContractFilterer) FilterAccountUnlocked(opts *bind.FilterOpts) (*ContractAccountUnlockedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "AccountUnlocked")
	if err != nil {
		return nil, err
	}
	return &ContractAccountUnlockedIterator{contract: _Contract.contract, event: "AccountUnlocked", logs: logs, sub: sub}, nil
}

// WatchAccountUnlocked is a free log subscription operation binding the contract event 0x7f6f9b5b10671e68dda65ac00050fba4d555889d122fcbbbb2d4739ea25a0179.
//
// Solidity: event AccountUnlocked(string accountId)
func (_Contract *ContractFilterer) WatchAccountUnlocked(opts *bind.WatchOpts, sink chan<- *ContractAccountUnlocked) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "AccountUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAccountUnlocked)
				if err := _Contract.contract.UnpackLog(event, "AccountUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountUnlocked is a log parse operation binding the contract event 0x7f6f9b5b10671e68dda65ac00050fba4d555889d122fcbbbb2d4739ea25a0179.
//
// Solidity: event AccountUnlocked(string accountId)
func (_Contract *ContractFilterer) ParseAccountUnlocked(log types.Log) (*ContractAccountUnlocked, error) {
	event := new(ContractAccountUnlocked)
	if err := _Contract.contract.UnpackLog(event, "AccountUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAddressApprovedIterator is returned from FilterAddressApproved and is used to iterate over the raw logs and unpacked data for AddressApproved events raised by the Contract contract.
type ContractAddressApprovedIterator struct {
	Event *ContractAddressApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAddressApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAddressApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAddressApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAddressApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAddressApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAddressApproved represents a AddressApproved event raised by the Contract contract.
type ContractAddressApproved struct {
	AccountId       string
	ApprovedAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAddressApproved is a free log retrieval operation binding the contract event 0xa54ea849c371a19826f087877d0e3fc76eed14d221cfad8573798e692990e28a.
//
// Solidity: event AddressApproved(string accountId, address approvedAddress)
func (_Contract *ContractFilterer) FilterAddressApproved(opts *bind.FilterOpts) (*ContractAddressApprovedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "AddressApproved")
	if err != nil {
		return nil, err
	}
	return &ContractAddressApprovedIterator{contract: _Contract.contract, event: "AddressApproved", logs: logs, sub: sub}, nil
}

// WatchAddressApproved is a free log subscription operation binding the contract event 0xa54ea849c371a19826f087877d0e3fc76eed14d221cfad8573798e692990e28a.
//
// Solidity: event AddressApproved(string accountId, address approvedAddress)
func (_Contract *ContractFilterer) WatchAddressApproved(opts *bind.WatchOpts, sink chan<- *ContractAddressApproved) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "AddressApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAddressApproved)
				if err := _Contract.contract.UnpackLog(event, "AddressApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressApproved is a log parse operation binding the contract event 0xa54ea849c371a19826f087877d0e3fc76eed14d221cfad8573798e692990e28a.
//
// Solidity: event AddressApproved(string accountId, address approvedAddress)
func (_Contract *ContractFilterer) ParseAddressApproved(log types.Log) (*ContractAddressApproved, error) {
	event := new(ContractAddressApproved)
	if err := _Contract.contract.UnpackLog(event, "AddressApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractApprovalRevokedIterator is returned from FilterApprovalRevoked and is used to iterate over the raw logs and unpacked data for ApprovalRevoked events raised by the Contract contract.
type ContractApprovalRevokedIterator struct {
	Event *ContractApprovalRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractApprovalRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractApprovalRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractApprovalRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractApprovalRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractApprovalRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractApprovalRevoked represents a ApprovalRevoked event raised by the Contract contract.
type ContractApprovalRevoked struct {
	AccountId      string
	RevokedAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApprovalRevoked is a free log retrieval operation binding the contract event 0xa3c463e01b2fce913c2e9ef8f9a10531b2e5447cc4e77d42b31c832376b6431f.
//
// Solidity: event ApprovalRevoked(string accountId, address revokedAddress)
func (_Contract *ContractFilterer) FilterApprovalRevoked(opts *bind.FilterOpts) (*ContractApprovalRevokedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ApprovalRevoked")
	if err != nil {
		return nil, err
	}
	return &ContractApprovalRevokedIterator{contract: _Contract.contract, event: "ApprovalRevoked", logs: logs, sub: sub}, nil
}

// WatchApprovalRevoked is a free log subscription operation binding the contract event 0xa3c463e01b2fce913c2e9ef8f9a10531b2e5447cc4e77d42b31c832376b6431f.
//
// Solidity: event ApprovalRevoked(string accountId, address revokedAddress)
func (_Contract *ContractFilterer) WatchApprovalRevoked(opts *bind.WatchOpts, sink chan<- *ContractApprovalRevoked) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ApprovalRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractApprovalRevoked)
				if err := _Contract.contract.UnpackLog(event, "ApprovalRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalRevoked is a log parse operation binding the contract event 0xa3c463e01b2fce913c2e9ef8f9a10531b2e5447cc4e77d42b31c832376b6431f.
//
// Solidity: event ApprovalRevoked(string accountId, address revokedAddress)
func (_Contract *ContractFilterer) ParseApprovalRevoked(log types.Log) (*ContractApprovalRevoked, error) {
	event := new(ContractApprovalRevoked)
	if err := _Contract.contract.UnpackLog(event, "ApprovalRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractSignatureIterator is returned from FilterSignature and is used to iterate over the raw logs and unpacked data for Signature events raised by the Contract contract.
type ContractSignatureIterator struct {
	Event *ContractSignature // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractSignatureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractSignature)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractSignature)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractSignatureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractSignatureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractSignature represents a Signature event raised by the Contract contract.
type ContractSignature struct {
	Signature []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSignature is a free log retrieval operation binding the contract event 0x38c6e29fd15ff9d955e6181fe5f870dbd096042948379eef3b18e4f976594ed8.
//
// Solidity: event Signature(bytes signature)
func (_Contract *ContractFilterer) FilterSignature(opts *bind.FilterOpts) (*ContractSignatureIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Signature")
	if err != nil {
		return nil, err
	}
	return &ContractSignatureIterator{contract: _Contract.contract, event: "Signature", logs: logs, sub: sub}, nil
}

// WatchSignature is a free log subscription operation binding the contract event 0x38c6e29fd15ff9d955e6181fe5f870dbd096042948379eef3b18e4f976594ed8.
//
// Solidity: event Signature(bytes signature)
func (_Contract *ContractFilterer) WatchSignature(opts *bind.WatchOpts, sink chan<- *ContractSignature) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Signature")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractSignature)
				if err := _Contract.contract.UnpackLog(event, "Signature", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignature is a log parse operation binding the contract event 0x38c6e29fd15ff9d955e6181fe5f870dbd096042948379eef3b18e4f976594ed8.
//
// Solidity: event Signature(bytes signature)
func (_Contract *ContractFilterer) ParseSignature(log types.Log) (*ContractSignature, error) {
	event := new(ContractSignature)
	if err := _Contract.contract.UnpackLog(event, "Signature", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
