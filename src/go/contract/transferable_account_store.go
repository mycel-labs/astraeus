// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package transferableaccountstore

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ITransferableAccountStoreAccount is an auto generated low-level Go binding around an user-defined struct.
type ITransferableAccountStoreAccount struct {
	AccountId          [16]byte
	Owner              common.Address
	PublicKeyX         *big.Int
	PublicKeyY         *big.Int
	SignatureAlgorithm uint8
	IsLocked           bool
}

// SignatureVerifierTimedSignature is an auto generated low-level Go binding around an user-defined struct.
type SignatureVerifierTimedSignature struct {
	ValidFor           uint64
	MessageHash        [32]byte
	Signature          []byte
	Signer             common.Address
	Nonce              uint64
	TargetFunctionHash [32]byte
}

// TransferableaccountstoreMetaData contains all meta data concerning the Transferableaccountstore contract.
var TransferableaccountstoreMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"AA\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"BB\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"GX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"GY\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"KEY_FA\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"PP\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"accountApprovals\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"accountsStore\",\"inputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approveAddress\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_address\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"consumeNonce\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createAccount\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createAccountCallback\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"account\",\"type\":\"tuple\",\"internalType\":\"structITransferableAccountStore.Account\",\"components\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deleteAccount\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getAccount\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structITransferableAccountStore.Account\",\"components\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getNonce\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isAccountLocked\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isApproved\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_address\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isOwner\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_address\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"revokeApproval\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"_address\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"sign\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"signCallback\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferAccount\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unlockAccount\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"accountId\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifyTimedSignature\",\"inputs\":[{\"name\":\"timedSignature\",\"type\":\"tuple\",\"internalType\":\"structSignatureVerifier.TimedSignature\",\"components\":[{\"name\":\"validFor\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"messageHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signer\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"targetFunctionHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"AccountCreated\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"account\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structITransferableAccountStore.Account\",\"components\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AccountDeleted\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AccountLocked\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"duration\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AccountTransferred\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"account\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structITransferableAccountStore.Account\",\"components\":[{\"name\":\"accountId\",\"type\":\"bytes16\",\"internalType\":\"Suave.DataId\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"publicKeyX\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"publicKeyY\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"signatureAlgorithm\",\"type\":\"uint8\",\"internalType\":\"enumITransferableAccountStore.SignatureAlgorithm\"},{\"name\":\"isLocked\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AccountUnlocked\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"AddressApproved\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"approvedAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ApprovalRevoked\",\"inputs\":[{\"name\":\"accountId\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"},{\"name\":\"revokedAddress\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Signature\",\"inputs\":[{\"name\":\"signature\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"InvalidTimedSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyApprovedAccount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyOwnerCanApproveAddresses\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyOwnerCanDeleteAccount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyOwnerCanRevokeApproval\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyOwnerCanUnlockAccount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OnlyUnlockAccount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"PeekerReverted\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}]",
	Bin: "0x608080604052346200009a57600080546001908181811c911680156200008f575b60208210146200007b57601f81116200004f575b50506006624b455960e81b0190556136439081620000a08239f35b828052601f60208420910160051c8101905b81811062000070575062000034565b838155820162000061565b634e487b7160e01b83526022600452602483fd5b90607f169062000020565b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806303a507be146101a257806311071f711461019d578063186cd167146101985780632d0335ab1461015c5780634518f6b31461019357806355ed63b31461018e5780635727dc5c146101895780635e06f5da1461018457806360bc0a601461017f578063690937891461017a5780636aa331861461017557806370634dc614610170578063726ccf8d1461016b578063761ca154146101665780637a308a4c146101615780637ecebe001461015c578063826b946914610157578063997da8d414610152578063a69deb2e1461014d578063ba545e8514610148578063bde1eee714610143578063c9be9cb91461013e578063e0c9d58814610139578063e49520f7146101345763eeeac01e1461012f57600080fd5b6111b8565b611143565b611072565b610fa4565b610f8b565b610f72565b610f0f565b610ef3565b610ece565b6106d9565b610e93565b610e63565b610c8e565b610c0d565b610b64565b610ada565b6109cd565b61092a565b6108ed565b6108ca565b6107dd565b6105f7565b61024c565b346101dd5760003660031901126101dd5760206040517f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f817988152f35b600080fd5b908160c09103126101dd5790565b60005b8381106102035750506000910152565b81810151838201526020016101f3565b9060209161022c815180928185528580860191016101f0565b601f01601f1916010190565b906020610249928181520190610213565b90565b346101dd5760203660031901126101dd576004356001600160401b0381116101dd5761027c9036906004016101e2565b61028c610287611d72565b611b53565b61029c610298826125ff565b1590565b610413576103f761040361040f926102b261206f565b906103e86102ec6102c1611b9f565b6102dd306102ce83611548565b6001600160a01b039091169052565b6102e5611bb9565b9080611fdd565b9161034661034161030585516001600160801b03191690565b9561033c6040518061031a6020820185611106565b039861032e601f199a8b81018452836104ac565b610336610d74565b90611dc4565b61340a565b612990565b906103b2610387610381610358611b9f565b9761037360608801996102ce61036d8c6112c0565b91611548565b516001600160801b03191690565b966112c0565b6103a26103926104cd565b6001600160801b03199098168852565b6001600160a01b03166020870152565b6040850152606084015260016080840152600160a08401526103dc60405193849260208401611c1d565b038381018352826104ac565b60405193849160208301611ce6565b039081018352826104ac565b60405191829182610238565b0390f35b604051637239f2bf60e11b8152600490fd5b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761045657604052565b610425565b606081019081106001600160401b0382111761045657604052565b604081019081106001600160401b0382111761045657604052565b608081019081106001600160401b0382111761045657604052565b90601f801991011681019081106001600160401b0382111761045657604052565b604051906104da8261043b565b565b604051906104da82610491565b6001600160401b03811161045657601f01601f191660200190565b919091610510816104e9565b61051d60405191826104ac565b809382825282116101dd57818160009384602080950137010152565b929192610545826104e9565b9161055360405193846104ac565b8294818452818301116101dd578281602093846000960137010152565b9080601f830112156101dd5781602061024993359101610539565b6001600160a01b038116036101dd57565b35906104da8261058b565b9060606003198301126101dd576001600160401b036004358181116101dd57836105d3916004016101e2565b926024359182116101dd576105ea91600401610570565b906044356102498161058b565b346101dd57610605366105a7565b909161062260ff60046106178661111d565b015460081c1661125e565b61062b8161241a565b1561041357610298606061064a9201356106448161058b565b84611227565b6106c757816106b36106a36106896106827fa3c463e01b2fce913c2e9ef8f9a10531b2e5447cc4e77d42b31c832376b6431f9661111d565b5460801b90565b6001600160801b0319166000526002602052604060002090565b80546001600160a01b0319169055565b6106c2604051928392836112ca565b0390a1005b60405163580522df60e11b8152600490fd5b346101dd5760203660031901126101dd576004356106f68161058b565b60018060a01b0316600052600360205260206001600160401b0360406000205416604051908152f35b60206003198201126101dd57600435906001600160401b0382116101dd5761024991600401610570565b634e487b7160e01b600052602160045260246000fd5b6003111561076957565b610749565b9060038210156107695752565b60a080916001600160801b03198151168452600180831b03602082015116602085015260408101516040850152606081015160608501526107c46080820151608086019061076e565b01511515910152565b60c0810192916104da919061077b565b346101dd5761040f6108246107f13661071f565b6040516107fd8161043b565b60a0600091828152826020820152826040820152826060820152826080820152015261111d565b61088d60ff6004604051936108388561043b565b6001600160801b0319815460801b16855260018060a01b0360018201541660208601526002810154604086015260038101546060860152015461088082821660808601611252565b60081c16151560a0830152565b604051918291826107cd565b60406003198201126101dd57600435906001600160401b0382116101dd576108c3916004016101e2565b9060243590565b346101dd5760206108e36108dd36610899565b90612948565b6040519015158152f35b346101dd5760003660031901126101dd57602060405160078152f35b6001600160801b03198116036101dd57565b60c4359081151582036101dd57565b346101dd5760e03660031901126101dd576004356001600160401b0381116101dd5761095a9036906004016101e2565b60c03660231901126101dd576040516109728161043b565b60243561097e81610909565b815260443561098c8161058b565b60208201526064356040820152608435606082015260a4359060038210156101dd5761040f926104039260808301526109c361091b565b60a08301526112f2565b346101dd576109db36610899565b906080810135906109eb82611be0565b606081019182356109fb8161058b565b6001600160a01b03166000908152600360205260409020546001600160401b03908116911603610aa557602092610a3191612948565b9081610a43575b506040519015158152f35b610a6c610a52610a9f926112c0565b6001600160a01b0316600090815260036020526040902090565b610a85610a8082546001600160401b031690565b612402565b6001600160401b03166001600160401b0319825416179055565b38610a38565b60405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606490fd5b346101dd5760203660031901126101dd57600435610af781610909565b6001600160801b0319166000526002602052602060018060a01b0360406000205416604051908152f35b9060406003198301126101dd576001600160401b036004358181116101dd5783610b4d916004016101e2565b926024359182116101dd5761024991600401610570565b346101dd57610b7236610b21565b90610b7c81612485565b15610413576060610b98910135610b928161058b565b82611227565b15610bfb577f68621f32198be2aabd285ff157a36182342ebc518a0e054c08a1461ae0d86431610bf582610bcd60049461111d565b6000948186809355826001820155826002820155826003820155015560405191829182610238565b0390a180f35b604051639ff2588560e01b8152600490fd5b346101dd5760603660031901126101dd576001600160401b036004358181116101dd57610c3e9036906004016101e2565b906024358181116101dd57610c57903690600401610570565b916044359182116101dd57366023830112156101dd5761040f92610c88610403933690602481600401359101610539565b9161217c565b346101dd57610c9c366105a7565b9091610cae60ff60046106178661111d565b610cba610298826124d7565b61041357610cdf610298610cd96060610cd28761111d565b94016112c0565b85611227565b610d6257610d4f610d5d7fa54ea849c371a19826f087877d0e3fc76eed14d221cfad8573798e692990e28a94610d3f85610d206106896106b3975460801b90565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040519283916020830190611106565b03601f1981018352826104ac565b613531565b60405163714547f360e01b8152600490fd5b604051906000805490600182811c92818116918215610e59575b6020918286108414610e4557858852879493602086019392918115610e265750600114610dc5575b5050506104da925003836104ac565b925093610df3600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390565b946000935b828510610e10575050506104da935001388080610db6565b8654858501529586019588955093810193610df8565b925050506104da9491925060ff19168252151560051b01388080610db6565b634e487b7160e01b85526022600452602485fd5b93607f1693610d8e565b346101dd5760003660031901126101dd5761040f610e7f610d74565b604051918291602083526020830190610213565b346101dd5760003660031901126101dd5760206040517f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b88152f35b346101dd5760003660031901126101dd57610ef1610eec3636610504565b61174e565b005b346101dd5760003660031901126101dd57602060405160008152f35b346101dd57602060ff6004610f2b610f263661071f565b61111d565b015460081c166040519015158152f35b60406003198201126101dd57600435906001600160401b0382116101dd57610f6591600401610570565b906024356102498161058b565b346101dd5760206108e3610f8536610f3b565b906111d9565b346101dd5760206108e3610f9e36610f3b565b90611227565b346101dd57610fb2366105a7565b9091610fc460ff60046106178661111d565b610fcd81612529565b1561041357610298610fe46060610fea93016112c0565b846111d9565b611060578161104061101c7f72b22feb9960f9be8120ca344ab76eda8b88fec09813b9dc25b8f079e3c464379461111d565b6001810180546001600160a01b0319166001600160a01b0390951694909417909355565b6110516106a3610689845460801b90565b6106c260405192839283612107565b60405163285b8d9760e21b8152600490fd5b346101dd5761108036610b21565b9061109160ff60046106178561111d565b61109a8161257b565b156104135760606110b0910135610b928161058b565b156110f4576106c28161040360046110e87f7f6f9b5b10671e68dda65ac00050fba4d555889d122fcbbbb2d4739ea25a01799561111d565b01805461ff0019169055565b604051632825572b60e21b8152600490fd5b90611119602092828151948592016101f0565b0190565b60206111369181604051938285809451938492016101f0565b8101600181520301902090565b346101dd5760c0611156610f263661071f565b60ff81549160018060a01b036001820154169060028101546004600383015492015492604051956001600160801b03199060801b1686526020860152604085015260608401526111ab6080840183831661076e565b60081c16151560a0820152f35b346101dd5760003660031901126101dd5760206040516401000003d0198152f35b6111e29061111d565b60018101546001600160a01b039283169291908216831461121f576001600160801b0319905460801b166000526002602052604060002054161490565b505050600190565b6001600160a01b0390819060019061123e9061111d565b01541691161461124d57600090565b600190565b60038210156107695752565b1561126557565b60405162461bcd60e51b815260206004820152602d60248201527f4163636f756e74206d757374206265206c6f636b656420746f20706572666f7260448201526c36903a3434b99030b1ba34b7b760991b6064820152608490fd5b356102498161058b565b906112e2602091949394604084526040840190610213565b6001600160a01b03909416910152565b90611300610eec3636610504565b608082013561130e81611be0565b606083019081359161131f8361058b565b60018060a01b0394858416928360005260036020526001600160401b038060406000205416911603610aa557611354906125ff565b908161139c575b5015610413576102499361137161137d9361058b565b602084015116146113b1565b611397600161138f60a0840151151590565b151514611411565b611a57565b610a6c610a526113ab926112c0565b3861135b565b156113b857565b60405162461bcd60e51b815260206004820152602b60248201527f546865207369676e6572206973206e6f7420746865206f776e6572206f66207460448201526a34329030b1b1b7bab73a1760a91b6064820152608490fd5b1561141857565b60405162461bcd60e51b815260206004820152602760248201527f546865206163636f756e742073686f756c64206265206c6f636b656420627920604482015266191959985d5b1d60ca1b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b6401000003d0199081039190821161149757565b61146d565b602f1981019190821161149757565b60361981019190821161149757565b60561981019190821161149757565b9190820391821161149757565b906114e0826104e9565b6114ed60405191826104ac565b82815280926114fe601f19916104e9565b0190602036910137565b60001981146114975760010190565b906001820180921161149757565b9190820180921161149757565b634e487b7160e01b600052603260045260246000fd5b8051156115555760200190565b611532565b908151811015611555570160200190565b6001600160401b0381116104565760051b60200190565b81601f820112156101dd578051611598816104e9565b926115a660405194856104ac565b818452602082840101116101dd5761024991602080850191016101f0565b9060209081838203126101dd5782516001600160401b03938482116101dd57019080601f830112156101dd578151936115fc8561156b565b94604061160b815197886104ac565b8187528587019286600593841b870101958587116101dd57878101945b87861061163b5750505050505050505090565b85518381116101dd5782019060609081601f19848b0301126101dd578551916116638361045b565b8b8401516116708161058b565b8352868401518681116101dd5784018a603f820112156101dd57808d809201518961169a8261156b565b936116a7825195866104ac565b8285528401918c1b830101918d83116101dd578f908b01915b8383106116f95750915050840152830151918583116101dd576116ea8a8d80969581960101611582565b87820152815201950194611628565b819083518152019101908f906116c0565b8051600110156115555760400190565b8051600210156115555760600190565b8051600310156115555760800190565b80518210156115555760209160051b010190565b906117588261182e565b918051808414611809578361176c916114c9565b611775816114d6565b91600094855b8381106117ca575050505080602080611799935183010191016115c4565b915b82518110156117c557806117bb6117b56117c0938661173a565b5161193d565b611508565b61179b565b509050565b806117f26117e46117de6118049486611525565b8661155a565b516001600160f81b03191690565b881a6117fe828861155a565b53611508565b61177b565b50509050565b6040519061181c82610476565b600382526254354360e81b6020830152565b600090815b8151811015611936576118496117e4828461155a565b61186c61185f6117e461185a61180f565b611548565b6001600160f81b03191690565b6001600160f81b03199182161461188d575b5061188890611508565b611833565b929091600193845b61189d61180f565b5181101561192c576118af8186611525565b8351118015906118f4575b6118cc576118c790611508565b611895565b505091908093505b6118de573861187e565b905061024991506118ed61180f565b5190611525565b5061190b6117e46119058388611525565b8561155a565b8261192361185f6117e48561191e61180f565b61155a565b911614156118ba565b50509190926118d4565b5090505190565b604081015190815190602080910180518051801560001461196157505050909101a0565b6001810361197b5750506119759051611548565b519201a1565b919391600281036119a45750509061199e6119968451611548565b51935161170a565b519301a2565b600381036119d55750506119b88351611548565b51916119cf6119c7855161170a565b51945161171a565b519401a3565b6004146119e4575b5050505050565b6119ed90611548565b51906119f9845161170a565b5192611a10611a08865161171a565b51955161172a565b519501a438808080806119dd565b9060038110156107695760ff80198354169116179055565b92916020611a4f6104da9360e0875260e0870190610213565b94019061077b565b7f13a0f811928fd6fa4086bf6d4837de6d4af824461f9160fdb45dee1aa25e2d01611b4d6001600160801b031992611b406004611aa78684511660405190602082015260108152610d5d81610476565b95611ab18761111d565b90845160801c90825416178155611af7611ad4602086015160018060a01b031690565b6001830180546001600160a01b0319166001600160a01b03909216919091179055565b604084015160028201556060840151600382015501611b236080840151611b1d8161075f565b82611a1e565b60a08301511515815461ff00191690151560081b61ff0016179055565b6040519182918583611a36565b0390a190565b15611b5a57565b60405162461bcd60e51b815260206004820152601d60248201527f6d7573742062652063616c6c656420636f6e666964656e7469616c6c790000006044820152606490fd5b60405190611bac82610476565b6001825260203681840137565b60405190611bc682610476565b600b82526a707269766174655f6b657960a81b6020830152565b6001600160401b038116036101dd57565b35906104da82611be0565b908060209392818452848401376000828201840152601f01601f1916010190565b929160e08452813591611c2f83611be0565b6001600160401b0380931660e086015260208101356101008601526040810135601e19823603018112156101dd578101906020823592019382116101dd5781360384136101dd5760a0611c956104da9560209460c06101208b01526101a08a0191611bfc565b91611cb6611ca56060830161059c565b6001600160a01b03166101408a0152565b611cd6611cc560808301611bf1565b6001600160401b03166101608a0152565b013561018087015294019061077b565b90600491632f037aed60e11b8152611d0782518093602086850191016101f0565b010190565b3d15611d37573d90611d1d826104e9565b91611d2b60405193846104ac565b82523d6000602084013e565b606090565b90604061024992634203000081528160208201520190610213565b90604061024992634010000381528160208201520190610213565b6342010000600080808080855af190611d89611d0c565b9115611d9757506020015190565b611dc06040519283926375fff46760e01b84526004840152604060248401526044830190610213565b0390fd5b91611dfc611e0f6000939284936103f760405194859260208401996001600160801b0319168a52606060408501526080840190610213565b601f199384848303016060850152610213565b5163420200009382855af190611e23611d0c565b9115611d97575050565b90815180825260208080930193019160005b828110611e4d575050505090565b83516001600160a01b031685529381019392810192600101611e3f565b91611e9a90611e8c6102499593600a8652608060208701526080860190611e2d565b908482036040860152611e2d565b916060818403910152610213565b51906104da82610909565b51906104da82611be0565b81601f820112156101dd57805191611ed58361156b565b92611ee360405194856104ac565b808452602092838086019260051b8201019283116101dd578301905b828210611f0d575050505090565b8380918351611f1b8161058b565b815201910190611eff565b906020828203126101dd5781516001600160401b03928382116101dd57019060c0828203126101dd57611f576104cd565b92611f6183611ea8565b8452611f6f60208401611ea8565b6020850152611f8060408401611eb3565b604085015260608301518181116101dd5782611f9d918501611ebe565b606085015260808301518181116101dd5782611fba918501611ebe565b608085015260a08301519081116101dd57611fd59201611582565b60a082015290565b60a09261202760405193611ff08561043b565b6060600096868880985287602082015287604082015282808201528260808201520152610d4f604051938492602084019687611e6a565b51908263420300005af1612039611d0c565b9015612052578060208061024993518301019101611f26565b6040516375fff46760e01b8152908190611dc09060048301611d3c565b60405190602080830190600080809581855283815261208d81610476565b5163532000039482865af1916120a1611d0c565b92156120dc5750815182019381838603126120d95781830151906001600160401b0382116120d9575081610249949501920101611582565b80fd5b9050611dc06040519283926375fff46760e01b84526004840152604060248401526044830190610213565b9060ff600461212360c09396959660e0865260e0860190610213565b8654608090811b6001600160801b031916602087015260018801546001600160a01b031660408701526002880154606087015260038801549086015295015461217160a0850183831661076e565b60081c161515910152565b91909161218a610287611d72565b612196610298826126de565b61041357610298610fe460606121ac93016112c0565b611060576121c960046121be8461111d565b015460081c60ff1690565b61225d5761040361223d9161222b61221d6122047f38c6e29fd15ff9d955e6181fe5f870dbd096042948379eef3b18e4f976594ed89661111d565b6001810154610682906001600160a01b0316151561226f565b612225610d74565b906122f8565b90612238825115156122b4565b61236d565b0390a160405163826b946960e01b60208201526102498160248101610d4f565b6040516334405dbd60e21b8152600490fd5b1561227657565b60405162461bcd60e51b81526020600482015260166024820152751058d8dbdd5b9d08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b156122bb57565b60405162461bcd60e51b815260206004820152601560248201527414da59db9a5b99c81ad95e481b9bdd08199bdd5b99605a1b6044820152606490fd5b906000610d4f61232a829360405192839160208301976001600160801b03191688526040808401526060830190610213565b5163420200019382855af19061233e611d0c565b9115611d97575090565b906020828203126101dd5781516001600160401b0381116101dd576102499201611582565b90612376611d72565b156101dd5760009182916123ba60405191826103f76123a16020830196606088526080840190610213565b876040840152601f199384848303016060850152610213565b51908263401000035af16123cc611d0c565b90156123e5578060208061024993518301019101612348565b6040516375fff46760e01b8152908190611dc09060048301611d57565b6001600160401b038091169081146114975760010190565b60808101359061242982611be0565b606081019182356124398161058b565b6001600160a01b03166000908152600360205260409020546001600160401b03908116911603610aa55761246c90612745565b9081612476575090565b610a6c610a52610249926112c0565b60808101359061249482611be0565b606081019182356124a48161058b565b6001600160a01b03166000908152600360205260409020546001600160401b03908116911603610aa55761246c906127ac565b6080810135906124e682611be0565b606081019182356124f68161058b565b6001600160a01b03166000908152600360205260409020546001600160401b03908116911603610aa55761246c90612813565b60808101359061253882611be0565b606081019182356125488161058b565b6001600160a01b03166000908152600360205260409020546001600160401b03908116911603610aa55761246c9061287a565b60808101359061258a82611be0565b6060810191823561259a8161058b565b6001600160a01b03166000908152600360205260409020546001600160401b03908116911603610aa55761246c906128e1565b903590601e19813603018212156101dd57018035906001600160401b0382116101dd576020019181360383136101dd57565b7f030bb6482ea73e1a5ab7ed4810436dc5d10770855cdbbba0acb9a90b04852e4f60a0820135036126995780610249913561263981611be0565b61264660408301836125cd565b929091602061269060608401359461265d8661058b565b6126668661058b565b6001600160a01b0386166000908152600360205260409020546001600160401b0316963691610539565b92013590612e6f565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642074617267657446756e6374696f6e486173680000000000006044820152606490fd5b7fd34780a58dd276dd414ea2abde077f3492ca5422926cdcadf8def7a93f12e99360a0820135036126995780610249913561271881611be0565b61272560408301836125cd565b929091602061273c60608401359461265d8661058b565b92013590612fa9565b7fdb4c3d2d6140b1cf852cff55c9c9a3d0c16d15c9da5e35f87fdc664b1bbf1c3260a0820135036126995780610249913561277f81611be0565b61278c60408301836125cd565b92909160206127a360608401359461265d8661058b565b92013590613028565b7f31819315e31d5175ae85114dd27816114c585abc7f9d53ef5ca9bf3c4f2db03860a082013503612699578061024991356127e681611be0565b6127f360408301836125cd565b929091602061280a60608401359461265d8661058b565b920135906130a7565b7f16d1dabab53b460506870428d7a255f9bff53294080a73797c114f4e25b5e76f60a0820135036126995780610249913561284d81611be0565b61285a60408301836125cd565b929091602061287160608401359461265d8661058b565b92013590613126565b7f29535a955f68dc291a88a89b6112c958d2edce1684117ccd6b54ca173656f65f60a082013503612699578061024991356128b481611be0565b6128c160408301836125cd565b92909160206128d860608401359461265d8661058b565b920135906131a5565b7f062e71868bb32b076e90fa8fa0fa661f47d2f38ee0e9db39a5ab5569589f633260a0820135036126995780610249913561291b81611be0565b61292860408301836125cd565b929091602061293f60608401359461265d8661058b565b92013590613224565b908060a0830135036126995781610249923561296381611be0565b61297060408301836125cd565b929091602061298760608401359461265d8661058b565b920135906132a3565b61299990612ae3565b9291908315158481612a6e575b5080612a66575b15612a305760009360016401000003d019825b6129ed575050506401000003d01984800991826401000003d0199109936401000003d01992839109900990565b80612a22612a0185612a28949a969a612a95565b93946401000003d01990612a1782888809611483565b900894988094612ad0565b906114c9565b9190826129c0565b60405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b210373ab6b132b960911b6044820152606490fd5b5060016129ad565b6401000003d01914159050386129a6565b634e487b7160e01b600052601260045260246000fd5b8115612a9f570490565b612a7f565b908160041b918083046010149015171561149757565b908160011b918083046002149015171561149757565b8181029291811591840414171561149757565b7f79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798917f483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b86001928015612b88576000948592918590805b612b465750505050929190565b60018116612b6a575b90612b5f9160011c938493612de6565b909391929091612b39565b939083838298612b5f9a612b7d95612bed565b909750959093612b4f565b509190565b60405190612b9a82610491565b6080368337565b15612ba857565b60405162461bcd60e51b815260206004820152601e60248201527f557365206a6163446f75626c652066756e6374696f6e20696e737465616400006044820152606490fd5b91949290959395821580612dde575b612dd457811580612dcc575b612dc257612cc1612c17612b8d565b6401000003d0198880098082526401000003d01990890960208201526401000003d01986800960408201818152906401000003d0199088096060830152612c5c6104dc565b956401000003d01991519009928386526401000003d01990606083015190099060208601948286526401000003d019908251900990604087019a828c5260206401000003d01992015190099060608701948286521491821592612db7575b5050612ba1565b612cc9612b8d565b96516401000003d01990612cdd8551611483565b90088752516401000003d01990612cf48351611483565b900890612da0602088019383855288516401000003d01981800960408b01818152916401000003d019910960608b0195818752612d376401000003d01992611483565b906401000003d01990800908825182516401000003d0199291612d6291849182919009600209611483565b90089551915190516401000003d01991096401000003d01991908290612d8788611483565b90089009915192516401000003d0199384919009611483565b900894519094936401000003d01992839109900990565b141590503880612cba565b9550509050929190565b508615612c08565b5091935050929190565b508015612bfc565b9290918015610249576401000003d0199081848009908280828009968180808080808987096004099b80096000099280096003090891838780088403848111611497578490818580090890818503908582116114975785818192096008098503908582116114975785948580949281939b08900908940960020990565b6040513d6000823e3d90fd5b939092936001600160401b0381164211612f9f576040519060208201926001600160401b0360c01b809260c01b1684526001600160601b03198760601b16602884015260c01b16603c8201527f030bb6482ea73e1a5ab7ed4810436dc5d10770855cdbbba0acb9a90b04852e4f604482015260448152612eee81610491565b5190208203612f9757612f70600091612f4a602094604051612f4181610d4f89820194856039917f194d7963656c205369676e6564204d6573736167653a0a333200000000000000825260198201520190565b5190209161336b565b6040805194855260ff909116602085015283019190915260608201529081906080820190565b838052039060015afa15612f92576000516001600160a01b0390811691161490565b612e63565b505050600090565b5050505050600090565b939092936001600160401b0381164211612f9f576040519060208201926001600160401b0360c01b809260c01b1684526001600160601b03198760601b16602884015260c01b16603c8201527fd34780a58dd276dd414ea2abde077f3492ca5422926cdcadf8def7a93f12e993604482015260448152612eee81610491565b939092936001600160401b0381164211612f9f576040519060208201926001600160401b0360c01b809260c01b1684526001600160601b03198760601b16602884015260c01b16603c8201527fdb4c3d2d6140b1cf852cff55c9c9a3d0c16d15c9da5e35f87fdc664b1bbf1c32604482015260448152612eee81610491565b939092936001600160401b0381164211612f9f576040519060208201926001600160401b0360c01b809260c01b1684526001600160601b03198760601b16602884015260c01b16603c8201527f31819315e31d5175ae85114dd27816114c585abc7f9d53ef5ca9bf3c4f2db038604482015260448152612eee81610491565b939092936001600160401b0381164211612f9f576040519060208201926001600160401b0360c01b809260c01b1684526001600160601b03198760601b16602884015260c01b16603c8201527f16d1dabab53b460506870428d7a255f9bff53294080a73797c114f4e25b5e76f604482015260448152612eee81610491565b939092936001600160401b0381164211612f9f576040519060208201926001600160401b0360c01b809260c01b1684526001600160601b03198760601b16602884015260c01b16603c8201527f29535a955f68dc291a88a89b6112c958d2edce1684117ccd6b54ca173656f65f604482015260448152612eee81610491565b939092936001600160401b0381164211612f9f576040519060208201926001600160401b0360c01b809260c01b1684526001600160601b03198760601b16602884015260c01b16603c8201527f062e71868bb32b076e90fa8fa0fa661f47d2f38ee0e9db39a5ab5569589f6332604482015260448152612eee81610491565b90939192946001600160401b0382164211613302576040519160208301936001600160401b0360c01b809260c01b1685526001600160601b03198860601b16602885015260c01b16603c830152604482015260448152612eee81610491565b505050505050600090565b60ff601b9116019060ff821161149757565b1561332657565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964207369676e6174757265202776272076616c756500000000006044820152606490fd5b60418151036133c5576020810151916060604083015192015160001a90601b82106133b5575b6104da60ff8316601b81149081156133aa575b5061331f565b601c915014386133a4565b906133bf9061330d565b90613391565b60405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207369676e6174757265206c656e67746800000000000000006044820152606490fd5b906000805b83518110156134f65761343761343161342b6117e4848861155a565b60f81c90565b60ff1690565b6030811015806134eb575b6134cf575b6041811015806134c4575b6134a8575b60618110158061349d575b613476575b5061347190611508565b61340f565b6134969061349061348a6134719495612aa4565b916114ba565b90611525565b9190613467565b506066811115613462565b916134b56134be91612aa4565b613490846114ab565b91613457565b506046811115613452565b916134dc6134e591612aa4565b6134908461149c565b91613447565b506039811115613442565b509150565b6040519061350882610476565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b6020830152565b8115612a9f570690565b9061354461353f8351612aba565b6114d6565b61354c6134fb565b600093845b81518110156135e557806135c26117e46117de61357761342b6117e46135e0978961155a565b6135926117e461358c8a5160ff809516612a95565b8a61155a565b6135a861359e87612aba565b918d1a918b61155a565b536135b961342b6117e4878a61155a565b88519116613527565b6117fe6135d66135d184612aba565b611517565b91891a918761155a565b613551565b505060405161060f60f31b602082015292935061024991839150610d4f90602283019061110656fea26469706673582212206e89ad85c640bdb0fc549f9e4eaee644fce0ecbb861a7ddc0f9e4867d7e65e9664736f6c63430008130033",
}

// TransferableaccountstoreABI is the input ABI used to generate the binding from.
// Deprecated: Use TransferableaccountstoreMetaData.ABI instead.
var TransferableaccountstoreABI = TransferableaccountstoreMetaData.ABI

// TransferableaccountstoreBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TransferableaccountstoreMetaData.Bin instead.
var TransferableaccountstoreBin = TransferableaccountstoreMetaData.Bin

// DeployTransferableaccountstore deploys a new Ethereum contract, binding an instance of Transferableaccountstore to it.
func DeployTransferableaccountstore(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Transferableaccountstore, error) {
	parsed, err := TransferableaccountstoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TransferableaccountstoreBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Transferableaccountstore{TransferableaccountstoreCaller: TransferableaccountstoreCaller{contract: contract}, TransferableaccountstoreTransactor: TransferableaccountstoreTransactor{contract: contract}, TransferableaccountstoreFilterer: TransferableaccountstoreFilterer{contract: contract}}, nil
}

// Transferableaccountstore is an auto generated Go binding around an Ethereum contract.
type Transferableaccountstore struct {
	TransferableaccountstoreCaller     // Read-only binding to the contract
	TransferableaccountstoreTransactor // Write-only binding to the contract
	TransferableaccountstoreFilterer   // Log filterer for contract events
}

// TransferableaccountstoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransferableaccountstoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferableaccountstoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransferableaccountstoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferableaccountstoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransferableaccountstoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferableaccountstoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TransferableaccountstoreSession struct {
	Contract     *Transferableaccountstore // Generic contract binding to set the session for
	CallOpts     bind.CallOpts             // Call options to use throughout this session
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// TransferableaccountstoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TransferableaccountstoreCallerSession struct {
	Contract *TransferableaccountstoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                   // Call options to use throughout this session
}

// TransferableaccountstoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TransferableaccountstoreTransactorSession struct {
	Contract     *TransferableaccountstoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                   // Transaction auth options to use throughout this session
}

// TransferableaccountstoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type TransferableaccountstoreRaw struct {
	Contract *Transferableaccountstore // Generic contract binding to access the raw methods on
}

// TransferableaccountstoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TransferableaccountstoreCallerRaw struct {
	Contract *TransferableaccountstoreCaller // Generic read-only contract binding to access the raw methods on
}

// TransferableaccountstoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TransferableaccountstoreTransactorRaw struct {
	Contract *TransferableaccountstoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTransferableaccountstore creates a new instance of Transferableaccountstore, bound to a specific deployed contract.
func NewTransferableaccountstore(address common.Address, backend bind.ContractBackend) (*Transferableaccountstore, error) {
	contract, err := bindTransferableaccountstore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transferableaccountstore{TransferableaccountstoreCaller: TransferableaccountstoreCaller{contract: contract}, TransferableaccountstoreTransactor: TransferableaccountstoreTransactor{contract: contract}, TransferableaccountstoreFilterer: TransferableaccountstoreFilterer{contract: contract}}, nil
}

// NewTransferableaccountstoreCaller creates a new read-only instance of Transferableaccountstore, bound to a specific deployed contract.
func NewTransferableaccountstoreCaller(address common.Address, caller bind.ContractCaller) (*TransferableaccountstoreCaller, error) {
	contract, err := bindTransferableaccountstore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreCaller{contract: contract}, nil
}

// NewTransferableaccountstoreTransactor creates a new write-only instance of Transferableaccountstore, bound to a specific deployed contract.
func NewTransferableaccountstoreTransactor(address common.Address, transactor bind.ContractTransactor) (*TransferableaccountstoreTransactor, error) {
	contract, err := bindTransferableaccountstore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreTransactor{contract: contract}, nil
}

// NewTransferableaccountstoreFilterer creates a new log filterer instance of Transferableaccountstore, bound to a specific deployed contract.
func NewTransferableaccountstoreFilterer(address common.Address, filterer bind.ContractFilterer) (*TransferableaccountstoreFilterer, error) {
	contract, err := bindTransferableaccountstore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreFilterer{contract: contract}, nil
}

// bindTransferableaccountstore binds a generic wrapper to an already deployed contract.
func bindTransferableaccountstore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TransferableaccountstoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transferableaccountstore *TransferableaccountstoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transferableaccountstore.Contract.TransferableaccountstoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transferableaccountstore *TransferableaccountstoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.TransferableaccountstoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transferableaccountstore *TransferableaccountstoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.TransferableaccountstoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transferableaccountstore *TransferableaccountstoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transferableaccountstore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transferableaccountstore *TransferableaccountstoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transferableaccountstore *TransferableaccountstoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.contract.Transact(opts, method, params...)
}

// AA is a free data retrieval call binding the contract method 0x997da8d4.
//
// Solidity: function AA() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCaller) AA(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "AA")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AA is a free data retrieval call binding the contract method 0x997da8d4.
//
// Solidity: function AA() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreSession) AA() (*big.Int, error) {
	return _Transferableaccountstore.Contract.AA(&_Transferableaccountstore.CallOpts)
}

// AA is a free data retrieval call binding the contract method 0x997da8d4.
//
// Solidity: function AA() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) AA() (*big.Int, error) {
	return _Transferableaccountstore.Contract.AA(&_Transferableaccountstore.CallOpts)
}

// BB is a free data retrieval call binding the contract method 0x5727dc5c.
//
// Solidity: function BB() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCaller) BB(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "BB")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BB is a free data retrieval call binding the contract method 0x5727dc5c.
//
// Solidity: function BB() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreSession) BB() (*big.Int, error) {
	return _Transferableaccountstore.Contract.BB(&_Transferableaccountstore.CallOpts)
}

// BB is a free data retrieval call binding the contract method 0x5727dc5c.
//
// Solidity: function BB() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) BB() (*big.Int, error) {
	return _Transferableaccountstore.Contract.BB(&_Transferableaccountstore.CallOpts)
}

// GX is a free data retrieval call binding the contract method 0x03a507be.
//
// Solidity: function GX() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCaller) GX(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "GX")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GX is a free data retrieval call binding the contract method 0x03a507be.
//
// Solidity: function GX() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreSession) GX() (*big.Int, error) {
	return _Transferableaccountstore.Contract.GX(&_Transferableaccountstore.CallOpts)
}

// GX is a free data retrieval call binding the contract method 0x03a507be.
//
// Solidity: function GX() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) GX() (*big.Int, error) {
	return _Transferableaccountstore.Contract.GX(&_Transferableaccountstore.CallOpts)
}

// GY is a free data retrieval call binding the contract method 0x7a308a4c.
//
// Solidity: function GY() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCaller) GY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "GY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GY is a free data retrieval call binding the contract method 0x7a308a4c.
//
// Solidity: function GY() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreSession) GY() (*big.Int, error) {
	return _Transferableaccountstore.Contract.GY(&_Transferableaccountstore.CallOpts)
}

// GY is a free data retrieval call binding the contract method 0x7a308a4c.
//
// Solidity: function GY() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) GY() (*big.Int, error) {
	return _Transferableaccountstore.Contract.GY(&_Transferableaccountstore.CallOpts)
}

// KEYFA is a free data retrieval call binding the contract method 0x761ca154.
//
// Solidity: function KEY_FA() view returns(string)
func (_Transferableaccountstore *TransferableaccountstoreCaller) KEYFA(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "KEY_FA")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// KEYFA is a free data retrieval call binding the contract method 0x761ca154.
//
// Solidity: function KEY_FA() view returns(string)
func (_Transferableaccountstore *TransferableaccountstoreSession) KEYFA() (string, error) {
	return _Transferableaccountstore.Contract.KEYFA(&_Transferableaccountstore.CallOpts)
}

// KEYFA is a free data retrieval call binding the contract method 0x761ca154.
//
// Solidity: function KEY_FA() view returns(string)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) KEYFA() (string, error) {
	return _Transferableaccountstore.Contract.KEYFA(&_Transferableaccountstore.CallOpts)
}

// PP is a free data retrieval call binding the contract method 0xeeeac01e.
//
// Solidity: function PP() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCaller) PP(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "PP")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PP is a free data retrieval call binding the contract method 0xeeeac01e.
//
// Solidity: function PP() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreSession) PP() (*big.Int, error) {
	return _Transferableaccountstore.Contract.PP(&_Transferableaccountstore.CallOpts)
}

// PP is a free data retrieval call binding the contract method 0xeeeac01e.
//
// Solidity: function PP() view returns(uint256)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) PP() (*big.Int, error) {
	return _Transferableaccountstore.Contract.PP(&_Transferableaccountstore.CallOpts)
}

// AccountApprovals is a free data retrieval call binding the contract method 0x69093789.
//
// Solidity: function accountApprovals(bytes16 ) view returns(address)
func (_Transferableaccountstore *TransferableaccountstoreCaller) AccountApprovals(opts *bind.CallOpts, arg0 [16]byte) (common.Address, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "accountApprovals", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountApprovals is a free data retrieval call binding the contract method 0x69093789.
//
// Solidity: function accountApprovals(bytes16 ) view returns(address)
func (_Transferableaccountstore *TransferableaccountstoreSession) AccountApprovals(arg0 [16]byte) (common.Address, error) {
	return _Transferableaccountstore.Contract.AccountApprovals(&_Transferableaccountstore.CallOpts, arg0)
}

// AccountApprovals is a free data retrieval call binding the contract method 0x69093789.
//
// Solidity: function accountApprovals(bytes16 ) view returns(address)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) AccountApprovals(arg0 [16]byte) (common.Address, error) {
	return _Transferableaccountstore.Contract.AccountApprovals(&_Transferableaccountstore.CallOpts, arg0)
}

// AccountsStore is a free data retrieval call binding the contract method 0xe49520f7.
//
// Solidity: function accountsStore(string ) view returns(bytes16 accountId, address owner, uint256 publicKeyX, uint256 publicKeyY, uint8 signatureAlgorithm, bool isLocked)
func (_Transferableaccountstore *TransferableaccountstoreCaller) AccountsStore(opts *bind.CallOpts, arg0 string) (struct {
	AccountId          [16]byte
	Owner              common.Address
	PublicKeyX         *big.Int
	PublicKeyY         *big.Int
	SignatureAlgorithm uint8
	IsLocked           bool
}, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "accountsStore", arg0)

	outstruct := new(struct {
		AccountId          [16]byte
		Owner              common.Address
		PublicKeyX         *big.Int
		PublicKeyY         *big.Int
		SignatureAlgorithm uint8
		IsLocked           bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AccountId = *abi.ConvertType(out[0], new([16]byte)).(*[16]byte)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.PublicKeyX = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PublicKeyY = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.SignatureAlgorithm = *abi.ConvertType(out[4], new(uint8)).(*uint8)
	outstruct.IsLocked = *abi.ConvertType(out[5], new(bool)).(*bool)

	return *outstruct, err

}

// AccountsStore is a free data retrieval call binding the contract method 0xe49520f7.
//
// Solidity: function accountsStore(string ) view returns(bytes16 accountId, address owner, uint256 publicKeyX, uint256 publicKeyY, uint8 signatureAlgorithm, bool isLocked)
func (_Transferableaccountstore *TransferableaccountstoreSession) AccountsStore(arg0 string) (struct {
	AccountId          [16]byte
	Owner              common.Address
	PublicKeyX         *big.Int
	PublicKeyY         *big.Int
	SignatureAlgorithm uint8
	IsLocked           bool
}, error) {
	return _Transferableaccountstore.Contract.AccountsStore(&_Transferableaccountstore.CallOpts, arg0)
}

// AccountsStore is a free data retrieval call binding the contract method 0xe49520f7.
//
// Solidity: function accountsStore(string ) view returns(bytes16 accountId, address owner, uint256 publicKeyX, uint256 publicKeyY, uint8 signatureAlgorithm, bool isLocked)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) AccountsStore(arg0 string) (struct {
	AccountId          [16]byte
	Owner              common.Address
	PublicKeyX         *big.Int
	PublicKeyY         *big.Int
	SignatureAlgorithm uint8
	IsLocked           bool
}, error) {
	return _Transferableaccountstore.Contract.AccountsStore(&_Transferableaccountstore.CallOpts, arg0)
}

// GetAccount is a free data retrieval call binding the contract method 0x4518f6b3.
//
// Solidity: function getAccount(string accountId) view returns((bytes16,address,uint256,uint256,uint8,bool))
func (_Transferableaccountstore *TransferableaccountstoreCaller) GetAccount(opts *bind.CallOpts, accountId string) (ITransferableAccountStoreAccount, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "getAccount", accountId)

	if err != nil {
		return *new(ITransferableAccountStoreAccount), err
	}

	out0 := *abi.ConvertType(out[0], new(ITransferableAccountStoreAccount)).(*ITransferableAccountStoreAccount)

	return out0, err

}

// GetAccount is a free data retrieval call binding the contract method 0x4518f6b3.
//
// Solidity: function getAccount(string accountId) view returns((bytes16,address,uint256,uint256,uint8,bool))
func (_Transferableaccountstore *TransferableaccountstoreSession) GetAccount(accountId string) (ITransferableAccountStoreAccount, error) {
	return _Transferableaccountstore.Contract.GetAccount(&_Transferableaccountstore.CallOpts, accountId)
}

// GetAccount is a free data retrieval call binding the contract method 0x4518f6b3.
//
// Solidity: function getAccount(string accountId) view returns((bytes16,address,uint256,uint256,uint8,bool))
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) GetAccount(accountId string) (ITransferableAccountStoreAccount, error) {
	return _Transferableaccountstore.Contract.GetAccount(&_Transferableaccountstore.CallOpts, accountId)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address _address) view returns(uint64)
func (_Transferableaccountstore *TransferableaccountstoreCaller) GetNonce(opts *bind.CallOpts, _address common.Address) (uint64, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "getNonce", _address)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address _address) view returns(uint64)
func (_Transferableaccountstore *TransferableaccountstoreSession) GetNonce(_address common.Address) (uint64, error) {
	return _Transferableaccountstore.Contract.GetNonce(&_Transferableaccountstore.CallOpts, _address)
}

// GetNonce is a free data retrieval call binding the contract method 0x2d0335ab.
//
// Solidity: function getNonce(address _address) view returns(uint64)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) GetNonce(_address common.Address) (uint64, error) {
	return _Transferableaccountstore.Contract.GetNonce(&_Transferableaccountstore.CallOpts, _address)
}

// IsAccountLocked is a free data retrieval call binding the contract method 0xa69deb2e.
//
// Solidity: function isAccountLocked(string accountId) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreCaller) IsAccountLocked(opts *bind.CallOpts, accountId string) (bool, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "isAccountLocked", accountId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsAccountLocked is a free data retrieval call binding the contract method 0xa69deb2e.
//
// Solidity: function isAccountLocked(string accountId) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreSession) IsAccountLocked(accountId string) (bool, error) {
	return _Transferableaccountstore.Contract.IsAccountLocked(&_Transferableaccountstore.CallOpts, accountId)
}

// IsAccountLocked is a free data retrieval call binding the contract method 0xa69deb2e.
//
// Solidity: function isAccountLocked(string accountId) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) IsAccountLocked(accountId string) (bool, error) {
	return _Transferableaccountstore.Contract.IsAccountLocked(&_Transferableaccountstore.CallOpts, accountId)
}

// IsApproved is a free data retrieval call binding the contract method 0xba545e85.
//
// Solidity: function isApproved(string accountId, address _address) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreCaller) IsApproved(opts *bind.CallOpts, accountId string, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "isApproved", accountId, _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApproved is a free data retrieval call binding the contract method 0xba545e85.
//
// Solidity: function isApproved(string accountId, address _address) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreSession) IsApproved(accountId string, _address common.Address) (bool, error) {
	return _Transferableaccountstore.Contract.IsApproved(&_Transferableaccountstore.CallOpts, accountId, _address)
}

// IsApproved is a free data retrieval call binding the contract method 0xba545e85.
//
// Solidity: function isApproved(string accountId, address _address) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) IsApproved(accountId string, _address common.Address) (bool, error) {
	return _Transferableaccountstore.Contract.IsApproved(&_Transferableaccountstore.CallOpts, accountId, _address)
}

// IsOwner is a free data retrieval call binding the contract method 0xbde1eee7.
//
// Solidity: function isOwner(string accountId, address _address) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreCaller) IsOwner(opts *bind.CallOpts, accountId string, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "isOwner", accountId, _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOwner is a free data retrieval call binding the contract method 0xbde1eee7.
//
// Solidity: function isOwner(string accountId, address _address) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreSession) IsOwner(accountId string, _address common.Address) (bool, error) {
	return _Transferableaccountstore.Contract.IsOwner(&_Transferableaccountstore.CallOpts, accountId, _address)
}

// IsOwner is a free data retrieval call binding the contract method 0xbde1eee7.
//
// Solidity: function isOwner(string accountId, address _address) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) IsOwner(accountId string, _address common.Address) (bool, error) {
	return _Transferableaccountstore.Contract.IsOwner(&_Transferableaccountstore.CallOpts, accountId, _address)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint64)
func (_Transferableaccountstore *TransferableaccountstoreCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (uint64, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint64)
func (_Transferableaccountstore *TransferableaccountstoreSession) Nonces(arg0 common.Address) (uint64, error) {
	return _Transferableaccountstore.Contract.Nonces(&_Transferableaccountstore.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint64)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) Nonces(arg0 common.Address) (uint64, error) {
	return _Transferableaccountstore.Contract.Nonces(&_Transferableaccountstore.CallOpts, arg0)
}

// VerifyTimedSignature is a free data retrieval call binding the contract method 0x55ed63b3.
//
// Solidity: function verifyTimedSignature((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, bytes32 targetFunctionHash) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreCaller) VerifyTimedSignature(opts *bind.CallOpts, timedSignature SignatureVerifierTimedSignature, targetFunctionHash [32]byte) (bool, error) {
	var out []interface{}
	err := _Transferableaccountstore.contract.Call(opts, &out, "verifyTimedSignature", timedSignature, targetFunctionHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyTimedSignature is a free data retrieval call binding the contract method 0x55ed63b3.
//
// Solidity: function verifyTimedSignature((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, bytes32 targetFunctionHash) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreSession) VerifyTimedSignature(timedSignature SignatureVerifierTimedSignature, targetFunctionHash [32]byte) (bool, error) {
	return _Transferableaccountstore.Contract.VerifyTimedSignature(&_Transferableaccountstore.CallOpts, timedSignature, targetFunctionHash)
}

// VerifyTimedSignature is a free data retrieval call binding the contract method 0x55ed63b3.
//
// Solidity: function verifyTimedSignature((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, bytes32 targetFunctionHash) view returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreCallerSession) VerifyTimedSignature(timedSignature SignatureVerifierTimedSignature, targetFunctionHash [32]byte) (bool, error) {
	return _Transferableaccountstore.Contract.VerifyTimedSignature(&_Transferableaccountstore.CallOpts, timedSignature, targetFunctionHash)
}

// ApproveAddress is a paid mutator transaction binding the contract method 0x726ccf8d.
//
// Solidity: function approveAddress((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, address _address) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactor) ApproveAddress(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "approveAddress", timedSignature, accountId, _address)
}

// ApproveAddress is a paid mutator transaction binding the contract method 0x726ccf8d.
//
// Solidity: function approveAddress((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, address _address) returns()
func (_Transferableaccountstore *TransferableaccountstoreSession) ApproveAddress(timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.ApproveAddress(&_Transferableaccountstore.TransactOpts, timedSignature, accountId, _address)
}

// ApproveAddress is a paid mutator transaction binding the contract method 0x726ccf8d.
//
// Solidity: function approveAddress((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, address _address) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) ApproveAddress(timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.ApproveAddress(&_Transferableaccountstore.TransactOpts, timedSignature, accountId, _address)
}

// ConsumeNonce is a paid mutator transaction binding the contract method 0x60bc0a60.
//
// Solidity: function consumeNonce((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, bytes32 targetFunctionHash) returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreTransactor) ConsumeNonce(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, targetFunctionHash [32]byte) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "consumeNonce", timedSignature, targetFunctionHash)
}

// ConsumeNonce is a paid mutator transaction binding the contract method 0x60bc0a60.
//
// Solidity: function consumeNonce((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, bytes32 targetFunctionHash) returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreSession) ConsumeNonce(timedSignature SignatureVerifierTimedSignature, targetFunctionHash [32]byte) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.ConsumeNonce(&_Transferableaccountstore.TransactOpts, timedSignature, targetFunctionHash)
}

// ConsumeNonce is a paid mutator transaction binding the contract method 0x60bc0a60.
//
// Solidity: function consumeNonce((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, bytes32 targetFunctionHash) returns(bool)
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) ConsumeNonce(timedSignature SignatureVerifierTimedSignature, targetFunctionHash [32]byte) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.ConsumeNonce(&_Transferableaccountstore.TransactOpts, timedSignature, targetFunctionHash)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x11071f71.
//
// Solidity: function createAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature) returns(bytes)
func (_Transferableaccountstore *TransferableaccountstoreTransactor) CreateAccount(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "createAccount", timedSignature)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x11071f71.
//
// Solidity: function createAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature) returns(bytes)
func (_Transferableaccountstore *TransferableaccountstoreSession) CreateAccount(timedSignature SignatureVerifierTimedSignature) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.CreateAccount(&_Transferableaccountstore.TransactOpts, timedSignature)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x11071f71.
//
// Solidity: function createAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature) returns(bytes)
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) CreateAccount(timedSignature SignatureVerifierTimedSignature) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.CreateAccount(&_Transferableaccountstore.TransactOpts, timedSignature)
}

// CreateAccountCallback is a paid mutator transaction binding the contract method 0x5e06f5da.
//
// Solidity: function createAccountCallback((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, (bytes16,address,uint256,uint256,uint8,bool) account) returns(string)
func (_Transferableaccountstore *TransferableaccountstoreTransactor) CreateAccountCallback(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, account ITransferableAccountStoreAccount) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "createAccountCallback", timedSignature, account)
}

// CreateAccountCallback is a paid mutator transaction binding the contract method 0x5e06f5da.
//
// Solidity: function createAccountCallback((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, (bytes16,address,uint256,uint256,uint8,bool) account) returns(string)
func (_Transferableaccountstore *TransferableaccountstoreSession) CreateAccountCallback(timedSignature SignatureVerifierTimedSignature, account ITransferableAccountStoreAccount) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.CreateAccountCallback(&_Transferableaccountstore.TransactOpts, timedSignature, account)
}

// CreateAccountCallback is a paid mutator transaction binding the contract method 0x5e06f5da.
//
// Solidity: function createAccountCallback((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, (bytes16,address,uint256,uint256,uint8,bool) account) returns(string)
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) CreateAccountCallback(timedSignature SignatureVerifierTimedSignature, account ITransferableAccountStoreAccount) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.CreateAccountCallback(&_Transferableaccountstore.TransactOpts, timedSignature, account)
}

// DeleteAccount is a paid mutator transaction binding the contract method 0x6aa33186.
//
// Solidity: function deleteAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactor) DeleteAccount(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "deleteAccount", timedSignature, accountId)
}

// DeleteAccount is a paid mutator transaction binding the contract method 0x6aa33186.
//
// Solidity: function deleteAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId) returns()
func (_Transferableaccountstore *TransferableaccountstoreSession) DeleteAccount(timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.DeleteAccount(&_Transferableaccountstore.TransactOpts, timedSignature, accountId)
}

// DeleteAccount is a paid mutator transaction binding the contract method 0x6aa33186.
//
// Solidity: function deleteAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) DeleteAccount(timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.DeleteAccount(&_Transferableaccountstore.TransactOpts, timedSignature, accountId)
}

// RevokeApproval is a paid mutator transaction binding the contract method 0x186cd167.
//
// Solidity: function revokeApproval((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, address _address) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactor) RevokeApproval(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "revokeApproval", timedSignature, accountId, _address)
}

// RevokeApproval is a paid mutator transaction binding the contract method 0x186cd167.
//
// Solidity: function revokeApproval((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, address _address) returns()
func (_Transferableaccountstore *TransferableaccountstoreSession) RevokeApproval(timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.RevokeApproval(&_Transferableaccountstore.TransactOpts, timedSignature, accountId, _address)
}

// RevokeApproval is a paid mutator transaction binding the contract method 0x186cd167.
//
// Solidity: function revokeApproval((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, address _address) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) RevokeApproval(timedSignature SignatureVerifierTimedSignature, accountId string, _address common.Address) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.RevokeApproval(&_Transferableaccountstore.TransactOpts, timedSignature, accountId, _address)
}

// Sign is a paid mutator transaction binding the contract method 0x70634dc6.
//
// Solidity: function sign((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, bytes data) returns(bytes)
func (_Transferableaccountstore *TransferableaccountstoreTransactor) Sign(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string, data []byte) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "sign", timedSignature, accountId, data)
}

// Sign is a paid mutator transaction binding the contract method 0x70634dc6.
//
// Solidity: function sign((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, bytes data) returns(bytes)
func (_Transferableaccountstore *TransferableaccountstoreSession) Sign(timedSignature SignatureVerifierTimedSignature, accountId string, data []byte) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.Sign(&_Transferableaccountstore.TransactOpts, timedSignature, accountId, data)
}

// Sign is a paid mutator transaction binding the contract method 0x70634dc6.
//
// Solidity: function sign((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, bytes data) returns(bytes)
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) Sign(timedSignature SignatureVerifierTimedSignature, accountId string, data []byte) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.Sign(&_Transferableaccountstore.TransactOpts, timedSignature, accountId, data)
}

// SignCallback is a paid mutator transaction binding the contract method 0x826b9469.
//
// Solidity: function signCallback() returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactor) SignCallback(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "signCallback")
}

// SignCallback is a paid mutator transaction binding the contract method 0x826b9469.
//
// Solidity: function signCallback() returns()
func (_Transferableaccountstore *TransferableaccountstoreSession) SignCallback() (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.SignCallback(&_Transferableaccountstore.TransactOpts)
}

// SignCallback is a paid mutator transaction binding the contract method 0x826b9469.
//
// Solidity: function signCallback() returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) SignCallback() (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.SignCallback(&_Transferableaccountstore.TransactOpts)
}

// TransferAccount is a paid mutator transaction binding the contract method 0xc9be9cb9.
//
// Solidity: function transferAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, address to) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactor) TransferAccount(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string, to common.Address) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "transferAccount", timedSignature, accountId, to)
}

// TransferAccount is a paid mutator transaction binding the contract method 0xc9be9cb9.
//
// Solidity: function transferAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, address to) returns()
func (_Transferableaccountstore *TransferableaccountstoreSession) TransferAccount(timedSignature SignatureVerifierTimedSignature, accountId string, to common.Address) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.TransferAccount(&_Transferableaccountstore.TransactOpts, timedSignature, accountId, to)
}

// TransferAccount is a paid mutator transaction binding the contract method 0xc9be9cb9.
//
// Solidity: function transferAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId, address to) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) TransferAccount(timedSignature SignatureVerifierTimedSignature, accountId string, to common.Address) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.TransferAccount(&_Transferableaccountstore.TransactOpts, timedSignature, accountId, to)
}

// UnlockAccount is a paid mutator transaction binding the contract method 0xe0c9d588.
//
// Solidity: function unlockAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactor) UnlockAccount(opts *bind.TransactOpts, timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Transferableaccountstore.contract.Transact(opts, "unlockAccount", timedSignature, accountId)
}

// UnlockAccount is a paid mutator transaction binding the contract method 0xe0c9d588.
//
// Solidity: function unlockAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId) returns()
func (_Transferableaccountstore *TransferableaccountstoreSession) UnlockAccount(timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.UnlockAccount(&_Transferableaccountstore.TransactOpts, timedSignature, accountId)
}

// UnlockAccount is a paid mutator transaction binding the contract method 0xe0c9d588.
//
// Solidity: function unlockAccount((uint64,bytes32,bytes,address,uint64,bytes32) timedSignature, string accountId) returns()
func (_Transferableaccountstore *TransferableaccountstoreTransactorSession) UnlockAccount(timedSignature SignatureVerifierTimedSignature, accountId string) (*types.Transaction, error) {
	return _Transferableaccountstore.Contract.UnlockAccount(&_Transferableaccountstore.TransactOpts, timedSignature, accountId)
}

// TransferableaccountstoreAccountCreatedIterator is returned from FilterAccountCreated and is used to iterate over the raw logs and unpacked data for AccountCreated events raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountCreatedIterator struct {
	Event *TransferableaccountstoreAccountCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransferableaccountstoreAccountCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransferableaccountstoreAccountCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransferableaccountstoreAccountCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransferableaccountstoreAccountCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransferableaccountstoreAccountCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransferableaccountstoreAccountCreated represents a AccountCreated event raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountCreated struct {
	AccountId string
	Account   ITransferableAccountStoreAccount
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountCreated is a free log retrieval operation binding the contract event 0x13a0f811928fd6fa4086bf6d4837de6d4af824461f9160fdb45dee1aa25e2d01.
//
// Solidity: event AccountCreated(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) FilterAccountCreated(opts *bind.FilterOpts) (*TransferableaccountstoreAccountCreatedIterator, error) {

	logs, sub, err := _Transferableaccountstore.contract.FilterLogs(opts, "AccountCreated")
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreAccountCreatedIterator{contract: _Transferableaccountstore.contract, event: "AccountCreated", logs: logs, sub: sub}, nil
}

// WatchAccountCreated is a free log subscription operation binding the contract event 0x13a0f811928fd6fa4086bf6d4837de6d4af824461f9160fdb45dee1aa25e2d01.
//
// Solidity: event AccountCreated(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) WatchAccountCreated(opts *bind.WatchOpts, sink chan<- *TransferableaccountstoreAccountCreated) (event.Subscription, error) {

	logs, sub, err := _Transferableaccountstore.contract.WatchLogs(opts, "AccountCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransferableaccountstoreAccountCreated)
				if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountCreated is a log parse operation binding the contract event 0x13a0f811928fd6fa4086bf6d4837de6d4af824461f9160fdb45dee1aa25e2d01.
//
// Solidity: event AccountCreated(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) ParseAccountCreated(log types.Log) (*TransferableaccountstoreAccountCreated, error) {
	event := new(TransferableaccountstoreAccountCreated)
	if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransferableaccountstoreAccountDeletedIterator is returned from FilterAccountDeleted and is used to iterate over the raw logs and unpacked data for AccountDeleted events raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountDeletedIterator struct {
	Event *TransferableaccountstoreAccountDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransferableaccountstoreAccountDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransferableaccountstoreAccountDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransferableaccountstoreAccountDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransferableaccountstoreAccountDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransferableaccountstoreAccountDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransferableaccountstoreAccountDeleted represents a AccountDeleted event raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountDeleted struct {
	AccountId string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountDeleted is a free log retrieval operation binding the contract event 0x68621f32198be2aabd285ff157a36182342ebc518a0e054c08a1461ae0d86431.
//
// Solidity: event AccountDeleted(string accountId)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) FilterAccountDeleted(opts *bind.FilterOpts) (*TransferableaccountstoreAccountDeletedIterator, error) {

	logs, sub, err := _Transferableaccountstore.contract.FilterLogs(opts, "AccountDeleted")
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreAccountDeletedIterator{contract: _Transferableaccountstore.contract, event: "AccountDeleted", logs: logs, sub: sub}, nil
}

// WatchAccountDeleted is a free log subscription operation binding the contract event 0x68621f32198be2aabd285ff157a36182342ebc518a0e054c08a1461ae0d86431.
//
// Solidity: event AccountDeleted(string accountId)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) WatchAccountDeleted(opts *bind.WatchOpts, sink chan<- *TransferableaccountstoreAccountDeleted) (event.Subscription, error) {

	logs, sub, err := _Transferableaccountstore.contract.WatchLogs(opts, "AccountDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransferableaccountstoreAccountDeleted)
				if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountDeleted is a log parse operation binding the contract event 0x68621f32198be2aabd285ff157a36182342ebc518a0e054c08a1461ae0d86431.
//
// Solidity: event AccountDeleted(string accountId)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) ParseAccountDeleted(log types.Log) (*TransferableaccountstoreAccountDeleted, error) {
	event := new(TransferableaccountstoreAccountDeleted)
	if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransferableaccountstoreAccountLockedIterator is returned from FilterAccountLocked and is used to iterate over the raw logs and unpacked data for AccountLocked events raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountLockedIterator struct {
	Event *TransferableaccountstoreAccountLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransferableaccountstoreAccountLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransferableaccountstoreAccountLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransferableaccountstoreAccountLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransferableaccountstoreAccountLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransferableaccountstoreAccountLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransferableaccountstoreAccountLocked represents a AccountLocked event raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountLocked struct {
	AccountId string
	Duration  *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountLocked is a free log retrieval operation binding the contract event 0xc02feab39b0c816c53795326d5d479bff481ce2565450ad60d1e54852dc2d589.
//
// Solidity: event AccountLocked(string accountId, uint256 duration)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) FilterAccountLocked(opts *bind.FilterOpts) (*TransferableaccountstoreAccountLockedIterator, error) {

	logs, sub, err := _Transferableaccountstore.contract.FilterLogs(opts, "AccountLocked")
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreAccountLockedIterator{contract: _Transferableaccountstore.contract, event: "AccountLocked", logs: logs, sub: sub}, nil
}

// WatchAccountLocked is a free log subscription operation binding the contract event 0xc02feab39b0c816c53795326d5d479bff481ce2565450ad60d1e54852dc2d589.
//
// Solidity: event AccountLocked(string accountId, uint256 duration)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) WatchAccountLocked(opts *bind.WatchOpts, sink chan<- *TransferableaccountstoreAccountLocked) (event.Subscription, error) {

	logs, sub, err := _Transferableaccountstore.contract.WatchLogs(opts, "AccountLocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransferableaccountstoreAccountLocked)
				if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountLocked is a log parse operation binding the contract event 0xc02feab39b0c816c53795326d5d479bff481ce2565450ad60d1e54852dc2d589.
//
// Solidity: event AccountLocked(string accountId, uint256 duration)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) ParseAccountLocked(log types.Log) (*TransferableaccountstoreAccountLocked, error) {
	event := new(TransferableaccountstoreAccountLocked)
	if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransferableaccountstoreAccountTransferredIterator is returned from FilterAccountTransferred and is used to iterate over the raw logs and unpacked data for AccountTransferred events raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountTransferredIterator struct {
	Event *TransferableaccountstoreAccountTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransferableaccountstoreAccountTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransferableaccountstoreAccountTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransferableaccountstoreAccountTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransferableaccountstoreAccountTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransferableaccountstoreAccountTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransferableaccountstoreAccountTransferred represents a AccountTransferred event raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountTransferred struct {
	AccountId string
	Account   ITransferableAccountStoreAccount
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountTransferred is a free log retrieval operation binding the contract event 0x72b22feb9960f9be8120ca344ab76eda8b88fec09813b9dc25b8f079e3c46437.
//
// Solidity: event AccountTransferred(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) FilterAccountTransferred(opts *bind.FilterOpts) (*TransferableaccountstoreAccountTransferredIterator, error) {

	logs, sub, err := _Transferableaccountstore.contract.FilterLogs(opts, "AccountTransferred")
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreAccountTransferredIterator{contract: _Transferableaccountstore.contract, event: "AccountTransferred", logs: logs, sub: sub}, nil
}

// WatchAccountTransferred is a free log subscription operation binding the contract event 0x72b22feb9960f9be8120ca344ab76eda8b88fec09813b9dc25b8f079e3c46437.
//
// Solidity: event AccountTransferred(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) WatchAccountTransferred(opts *bind.WatchOpts, sink chan<- *TransferableaccountstoreAccountTransferred) (event.Subscription, error) {

	logs, sub, err := _Transferableaccountstore.contract.WatchLogs(opts, "AccountTransferred")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransferableaccountstoreAccountTransferred)
				if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountTransferred is a log parse operation binding the contract event 0x72b22feb9960f9be8120ca344ab76eda8b88fec09813b9dc25b8f079e3c46437.
//
// Solidity: event AccountTransferred(string accountId, (bytes16,address,uint256,uint256,uint8,bool) account)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) ParseAccountTransferred(log types.Log) (*TransferableaccountstoreAccountTransferred, error) {
	event := new(TransferableaccountstoreAccountTransferred)
	if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransferableaccountstoreAccountUnlockedIterator is returned from FilterAccountUnlocked and is used to iterate over the raw logs and unpacked data for AccountUnlocked events raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountUnlockedIterator struct {
	Event *TransferableaccountstoreAccountUnlocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransferableaccountstoreAccountUnlockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransferableaccountstoreAccountUnlocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransferableaccountstoreAccountUnlocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransferableaccountstoreAccountUnlockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransferableaccountstoreAccountUnlockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransferableaccountstoreAccountUnlocked represents a AccountUnlocked event raised by the Transferableaccountstore contract.
type TransferableaccountstoreAccountUnlocked struct {
	AccountId string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAccountUnlocked is a free log retrieval operation binding the contract event 0x7f6f9b5b10671e68dda65ac00050fba4d555889d122fcbbbb2d4739ea25a0179.
//
// Solidity: event AccountUnlocked(string accountId)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) FilterAccountUnlocked(opts *bind.FilterOpts) (*TransferableaccountstoreAccountUnlockedIterator, error) {

	logs, sub, err := _Transferableaccountstore.contract.FilterLogs(opts, "AccountUnlocked")
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreAccountUnlockedIterator{contract: _Transferableaccountstore.contract, event: "AccountUnlocked", logs: logs, sub: sub}, nil
}

// WatchAccountUnlocked is a free log subscription operation binding the contract event 0x7f6f9b5b10671e68dda65ac00050fba4d555889d122fcbbbb2d4739ea25a0179.
//
// Solidity: event AccountUnlocked(string accountId)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) WatchAccountUnlocked(opts *bind.WatchOpts, sink chan<- *TransferableaccountstoreAccountUnlocked) (event.Subscription, error) {

	logs, sub, err := _Transferableaccountstore.contract.WatchLogs(opts, "AccountUnlocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransferableaccountstoreAccountUnlocked)
				if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountUnlocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccountUnlocked is a log parse operation binding the contract event 0x7f6f9b5b10671e68dda65ac00050fba4d555889d122fcbbbb2d4739ea25a0179.
//
// Solidity: event AccountUnlocked(string accountId)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) ParseAccountUnlocked(log types.Log) (*TransferableaccountstoreAccountUnlocked, error) {
	event := new(TransferableaccountstoreAccountUnlocked)
	if err := _Transferableaccountstore.contract.UnpackLog(event, "AccountUnlocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransferableaccountstoreAddressApprovedIterator is returned from FilterAddressApproved and is used to iterate over the raw logs and unpacked data for AddressApproved events raised by the Transferableaccountstore contract.
type TransferableaccountstoreAddressApprovedIterator struct {
	Event *TransferableaccountstoreAddressApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransferableaccountstoreAddressApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransferableaccountstoreAddressApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransferableaccountstoreAddressApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransferableaccountstoreAddressApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransferableaccountstoreAddressApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransferableaccountstoreAddressApproved represents a AddressApproved event raised by the Transferableaccountstore contract.
type TransferableaccountstoreAddressApproved struct {
	AccountId       string
	ApprovedAddress common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterAddressApproved is a free log retrieval operation binding the contract event 0xa54ea849c371a19826f087877d0e3fc76eed14d221cfad8573798e692990e28a.
//
// Solidity: event AddressApproved(string accountId, address approvedAddress)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) FilterAddressApproved(opts *bind.FilterOpts) (*TransferableaccountstoreAddressApprovedIterator, error) {

	logs, sub, err := _Transferableaccountstore.contract.FilterLogs(opts, "AddressApproved")
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreAddressApprovedIterator{contract: _Transferableaccountstore.contract, event: "AddressApproved", logs: logs, sub: sub}, nil
}

// WatchAddressApproved is a free log subscription operation binding the contract event 0xa54ea849c371a19826f087877d0e3fc76eed14d221cfad8573798e692990e28a.
//
// Solidity: event AddressApproved(string accountId, address approvedAddress)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) WatchAddressApproved(opts *bind.WatchOpts, sink chan<- *TransferableaccountstoreAddressApproved) (event.Subscription, error) {

	logs, sub, err := _Transferableaccountstore.contract.WatchLogs(opts, "AddressApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransferableaccountstoreAddressApproved)
				if err := _Transferableaccountstore.contract.UnpackLog(event, "AddressApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddressApproved is a log parse operation binding the contract event 0xa54ea849c371a19826f087877d0e3fc76eed14d221cfad8573798e692990e28a.
//
// Solidity: event AddressApproved(string accountId, address approvedAddress)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) ParseAddressApproved(log types.Log) (*TransferableaccountstoreAddressApproved, error) {
	event := new(TransferableaccountstoreAddressApproved)
	if err := _Transferableaccountstore.contract.UnpackLog(event, "AddressApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransferableaccountstoreApprovalRevokedIterator is returned from FilterApprovalRevoked and is used to iterate over the raw logs and unpacked data for ApprovalRevoked events raised by the Transferableaccountstore contract.
type TransferableaccountstoreApprovalRevokedIterator struct {
	Event *TransferableaccountstoreApprovalRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransferableaccountstoreApprovalRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransferableaccountstoreApprovalRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransferableaccountstoreApprovalRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransferableaccountstoreApprovalRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransferableaccountstoreApprovalRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransferableaccountstoreApprovalRevoked represents a ApprovalRevoked event raised by the Transferableaccountstore contract.
type TransferableaccountstoreApprovalRevoked struct {
	AccountId      string
	RevokedAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterApprovalRevoked is a free log retrieval operation binding the contract event 0xa3c463e01b2fce913c2e9ef8f9a10531b2e5447cc4e77d42b31c832376b6431f.
//
// Solidity: event ApprovalRevoked(string accountId, address revokedAddress)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) FilterApprovalRevoked(opts *bind.FilterOpts) (*TransferableaccountstoreApprovalRevokedIterator, error) {

	logs, sub, err := _Transferableaccountstore.contract.FilterLogs(opts, "ApprovalRevoked")
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreApprovalRevokedIterator{contract: _Transferableaccountstore.contract, event: "ApprovalRevoked", logs: logs, sub: sub}, nil
}

// WatchApprovalRevoked is a free log subscription operation binding the contract event 0xa3c463e01b2fce913c2e9ef8f9a10531b2e5447cc4e77d42b31c832376b6431f.
//
// Solidity: event ApprovalRevoked(string accountId, address revokedAddress)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) WatchApprovalRevoked(opts *bind.WatchOpts, sink chan<- *TransferableaccountstoreApprovalRevoked) (event.Subscription, error) {

	logs, sub, err := _Transferableaccountstore.contract.WatchLogs(opts, "ApprovalRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransferableaccountstoreApprovalRevoked)
				if err := _Transferableaccountstore.contract.UnpackLog(event, "ApprovalRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalRevoked is a log parse operation binding the contract event 0xa3c463e01b2fce913c2e9ef8f9a10531b2e5447cc4e77d42b31c832376b6431f.
//
// Solidity: event ApprovalRevoked(string accountId, address revokedAddress)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) ParseApprovalRevoked(log types.Log) (*TransferableaccountstoreApprovalRevoked, error) {
	event := new(TransferableaccountstoreApprovalRevoked)
	if err := _Transferableaccountstore.contract.UnpackLog(event, "ApprovalRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TransferableaccountstoreSignatureIterator is returned from FilterSignature and is used to iterate over the raw logs and unpacked data for Signature events raised by the Transferableaccountstore contract.
type TransferableaccountstoreSignatureIterator struct {
	Event *TransferableaccountstoreSignature // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TransferableaccountstoreSignatureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TransferableaccountstoreSignature)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TransferableaccountstoreSignature)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TransferableaccountstoreSignatureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TransferableaccountstoreSignatureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TransferableaccountstoreSignature represents a Signature event raised by the Transferableaccountstore contract.
type TransferableaccountstoreSignature struct {
	Signature []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSignature is a free log retrieval operation binding the contract event 0x38c6e29fd15ff9d955e6181fe5f870dbd096042948379eef3b18e4f976594ed8.
//
// Solidity: event Signature(bytes signature)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) FilterSignature(opts *bind.FilterOpts) (*TransferableaccountstoreSignatureIterator, error) {

	logs, sub, err := _Transferableaccountstore.contract.FilterLogs(opts, "Signature")
	if err != nil {
		return nil, err
	}
	return &TransferableaccountstoreSignatureIterator{contract: _Transferableaccountstore.contract, event: "Signature", logs: logs, sub: sub}, nil
}

// WatchSignature is a free log subscription operation binding the contract event 0x38c6e29fd15ff9d955e6181fe5f870dbd096042948379eef3b18e4f976594ed8.
//
// Solidity: event Signature(bytes signature)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) WatchSignature(opts *bind.WatchOpts, sink chan<- *TransferableaccountstoreSignature) (event.Subscription, error) {

	logs, sub, err := _Transferableaccountstore.contract.WatchLogs(opts, "Signature")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TransferableaccountstoreSignature)
				if err := _Transferableaccountstore.contract.UnpackLog(event, "Signature", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignature is a log parse operation binding the contract event 0x38c6e29fd15ff9d955e6181fe5f870dbd096042948379eef3b18e4f976594ed8.
//
// Solidity: event Signature(bytes signature)
func (_Transferableaccountstore *TransferableaccountstoreFilterer) ParseSignature(log types.Log) (*TransferableaccountstoreSignature, error) {
	event := new(TransferableaccountstoreSignature)
	if err := _Transferableaccountstore.contract.UnpackLog(event, "Signature", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
